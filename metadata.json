[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 9,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 9,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 10,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 13,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "def": {
                "sequence": {
                  "type": 14
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 15,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 15,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 15,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "def": {
                "sequence": {
                  "type": 17
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 18
                },
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 145,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 18,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 58,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "arctic_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 19,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "pallet_identity::Event<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "pallet_indices::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 34,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 35,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "pallet_assets::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "pallet_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Airdrop",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "pallet_airdrop::Event<Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Contracts",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "pallet_contracts::Event<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "pallet_ethereum::Event"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "pallet_evm::Event<Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "pallet_base_fee::Event"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "pallet_collator_selection::Event<Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "pallet_bounties::Event<Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "pallet_tips::Event<Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "pallet_preimage::Event<Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "pallet_proxy::Event<Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "pallet_multisig::Event<Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "pallet_democracy::Event<Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "type": 86,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>"
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "CouncilMembership",
                      "fields": [
                        {
                          "type": 89,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>"
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>"
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 91,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 135,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "orml_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 139,
                          "typeName": "orml_xtokens::Event<Runtime>"
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "type": 140,
                          "typeName": "orml_asset_registry::Event<Runtime>"
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "UnknownTokens",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "orml_unknown_tokens::Event"
                        }
                      ],
                      "index": 91
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 20,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 23,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 20,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 21,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 22,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 24,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 15,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 32,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 31
                },
                {
                  "name": "E",
                  "type": 23
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 31
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 23
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAssigned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A account index was assigned."
                      ]
                    },
                    {
                      "name": "IndexFreed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A account index has been freed up (unassigned)."
                      ]
                    },
                    {
                      "name": "IndexFrozen",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A account index has been frozen to its current account ID."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed."
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "name": "dmq_head",
                          "type": 10,
                          "typeName": "relay_chain::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 36,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 6,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 38,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "unvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked)."
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_airdrop",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ClaimSuccess",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "types::IconAddress"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "ClaimRequest have been ok for given icon address"
                      ]
                    },
                    {
                      "name": "ClaimPartialSuccess",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "types::IconAddress"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "PartialClaimRequest have been ok for given icon address"
                      ]
                    },
                    {
                      "name": "ServerAccountChanged",
                      "fields": [
                        {
                          "name": "old_account",
                          "type": 32,
                          "typeName": "Option<types::AccountIdOf<T>>"
                        },
                        {
                          "name": "new_account",
                          "type": 0,
                          "typeName": "types::AccountIdOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Value of ServerAccount storage have been changed"
                      ]
                    },
                    {
                      "name": "AirdropStateUpdated",
                      "fields": [
                        {
                          "name": "old_state",
                          "type": 43,
                          "typeName": "types::AirdropState"
                        },
                        {
                          "name": "new_state",
                          "type": 43,
                          "typeName": "types::AirdropState"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "AirdropState have been updated"
                      ]
                    },
                    {
                      "name": "MerkleRootUpdated",
                      "fields": [
                        {
                          "name": "old_root",
                          "type": 44,
                          "typeName": "Option<[u8; 32]>"
                        },
                        {
                          "name": "new_root",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "New merkle root have been set"
                      ]
                    },
                    {
                      "name": "CreditorBalanceLow",
                      "index": 5,
                      "docs": [
                        "Creditor balance is running low"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "pallet_airdrop",
                "types",
                "AirdropState"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_claim_request",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "block_exchange_request",
                      "type": 38,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_contracts",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Instantiated",
                      "fields": [
                        {
                          "name": "deployer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Contract deployed by address at the specified address."
                      ]
                    },
                    {
                      "name": "Terminated",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that was terminated."
                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that received the contracts remaining balance"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contract has been removed.",
                        "",
                        "# Note",
                        "",
                        "The only way for a contract to be removed and emitting this event is by calling",
                        "`seal_terminate`."
                      ]
                    },
                    {
                      "name": "CodeStored",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Code with the specified hash has been stored."
                      ]
                    },
                    {
                      "name": "ContractEmitted",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that emitted the event."
                          ]
                        },
                        {
                          "name": "data",
                          "type": 11,
                          "typeName": "Vec<u8>",
                          "docs": [
                            "Data supplied by the contract. Metadata generated during contract compilation",
                            "is needed to decode it."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A custom event emitted by the contract."
                      ]
                    },
                    {
                      "name": "CodeRemoved",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A code with the specified hash was removed."
                      ]
                    },
                    {
                      "name": "ContractCodeUpdated",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that has been updated."
                          ]
                        },
                        {
                          "name": "new_code_hash",
                          "type": 10,
                          "typeName": "T::Hash",
                          "docs": [
                            "New code hash that was set for the contract."
                          ]
                        },
                        {
                          "name": "old_code_hash",
                          "type": 10,
                          "typeName": "T::Hash",
                          "docs": [
                            "Previous code hash of the contract."
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A contract's code was updated."
                      ]
                    },
                    {
                      "name": "Called",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that called the `contract`."
                          ]
                        },
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that was called."
                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A contract was called either by a plain account or another contract.",
                        "",
                        "# Note",
                        "",
                        "Please keep in mind that like all events this is only emitted for successful",
                        "calls. This is because on failure all storage changes including events are",
                        "rolled back."
                      ]
                    },
                    {
                      "name": "DelegateCalled",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that performed the delegate call and hence in whose context",
                            "the `code_hash` is executed."
                          ]
                        },
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "CodeHash<T>",
                          "docs": [
                            "The code hash that was delegate called."
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A contract delegate called a code hash.",
                        "",
                        "# Note",
                        "",
                        "Please keep in mind that like all events this is only emitted for successful",
                        "calls. This is because on failure all storage changes including events are",
                        "rolled back."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "to",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "transaction_hash",
                          "type": 10,
                          "typeName": "H256"
                        },
                        {
                          "name": "exit_reason",
                          "type": 48,
                          "typeName": "ExitReason"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "[u8; 20]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "ExitSucceed"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "ExitError"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "ExitRevert"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "ExitFatal"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "index": 0
                    },
                    {
                      "name": "Returned",
                      "index": 1
                    },
                    {
                      "name": "Suicided",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "index": 0
                    },
                    {
                      "name": "StackOverflow",
                      "index": 1
                    },
                    {
                      "name": "InvalidJump",
                      "index": 2
                    },
                    {
                      "name": "InvalidRange",
                      "index": 3
                    },
                    {
                      "name": "DesignatedInvalid",
                      "index": 4
                    },
                    {
                      "name": "CallTooDeep",
                      "index": 5
                    },
                    {
                      "name": "CreateCollision",
                      "index": 6
                    },
                    {
                      "name": "CreateContractLimit",
                      "index": 7
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "Opcode"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "OutOfOffset",
                      "index": 8
                    },
                    {
                      "name": "OutOfGas",
                      "index": 9
                    },
                    {
                      "name": "OutOfFund",
                      "index": 10
                    },
                    {
                      "name": "PCUnderflow",
                      "index": 11
                    },
                    {
                      "name": "CreateEmpty",
                      "index": 12
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "Cow<'static, str>"
                        }
                      ],
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "evm_core",
                "opcode",
                "Opcode"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 53
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 53
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 53,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "index": 0
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "index": 1
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "ExitError"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "Cow<'static, str>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": 57,
                          "typeName": "Log"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": 47,
                          "typeName": "H160"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given address."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 47,
                          "typeName": "H160"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 47,
                          "typeName": "H160"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 47,
                          "typeName": "H160"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 47,
                      "typeName": "H160"
                    },
                    {
                      "name": "topics",
                      "type": 58,
                      "typeName": "Vec<H256>"
                    },
                    {
                      "name": "data",
                      "type": 11,
                      "typeName": "Bytes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "def": {
                "sequence": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewBaseFeePerGas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 60,
                          "typeName": "U256"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "BaseFeeOverflow",
                      "index": 1
                    },
                    {
                      "name": "NewElasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 62,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 61,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 9
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewInvulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NewDesiredCandidates",
                      "fields": [
                        {
                          "name": "desired_candidates",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "NewCandidacyBond",
                      "fields": [
                        {
                          "name": "bond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "CandidateAdded",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "CandidateRemoved",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 64,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BountyProposed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New bounty proposal."
                      ]
                    },
                    {
                      "name": "BountyRejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A bounty proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "BountyBecameActive",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A bounty proposal is funded and became active."
                      ]
                    },
                    {
                      "name": "BountyAwarded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A bounty is awarded to a beneficiary."
                      ]
                    },
                    {
                      "name": "BountyClaimed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A bounty is claimed by beneficiary."
                      ]
                    },
                    {
                      "name": "BountyCanceled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A bounty is cancelled."
                      ]
                    },
                    {
                      "name": "BountyExtended",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A bounty expiry is extended."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTip",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new tip suggestion has been opened."
                      ]
                    },
                    {
                      "name": "TipClosing",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A tip suggestion has reached threshold and is closing."
                      ]
                    },
                    {
                      "name": "TipClosed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A tip suggestion has been closed."
                      ]
                    },
                    {
                      "name": "TipRetracted",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A tip suggestion has been retracted."
                      ]
                    },
                    {
                      "name": "TipSlashed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "finder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A tip suggestion has been slashed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 23,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 23,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 72,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 73,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 72,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 73,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "error",
                          "type": 74,
                          "typeName": "LookupError"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 11
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "LookupError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "BadFormat",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "PureCreated",
                      "fields": [
                        {
                          "name": "pure",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 77,
                          "typeName": "u16"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A pure account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 10,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "arctic_runtime",
                "ProxyType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "NonTransfer",
                      "index": 1
                    },
                    {
                      "name": "Governance",
                      "index": 2
                    },
                    {
                      "name": "CancelProxy",
                      "index": 3
                    },
                    {
                      "name": "IdentityJudgement",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 79,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 79,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 79,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "depositors",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "threshold",
                          "type": 81,
                          "typeName": "VoteThreshold"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun."
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum."
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been enacted."
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An external proposal has been vetoed."
                      ]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken."
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned)."
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid."
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing."
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 82,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An account has voted in a referendum"
                      ]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An account has secconded a proposal"
                      ]
                    },
                    {
                      "name": "ProposalCanceled",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "A proposal got canceled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "index": 0
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "index": 1
                    },
                    {
                      "name": "SimpleMajority",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 83,
                          "typeName": "Vote"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 87,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with new_members. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "index": 2,
                      "docs": [
                        "Internal error happened while trying to perform election."
                      ]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone has renounced their candidacy."
                      ]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was slashed by amount due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "name": "seat_holder",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A seat holder was slashed by amount by being forcefully removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 87,
            "type": {
              "def": {
                "sequence": {
                  "type": 88
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 92,
                          "typeName": "Option<T::Hash>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some XCM was executed ok."
                      ]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 92,
                          "typeName": "Option<T::Hash>"
                        },
                        {
                          "name": "error",
                          "type": 93,
                          "typeName": "XcmError"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some XCM failed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 92,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Bad XCM version used."
                      ]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 92,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Bad XCM format used."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 92,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 92,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 94,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "sent_at",
                          "type": 4,
                          "typeName": "RelayBlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 9,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "required",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An XCM exceeded the individual message weight budget."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 9,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "used",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An XCM from the overweight queue was executed with the given actual weight used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 118,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 127,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "H256"
                        },
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 128,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "\\[ destination, result \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 93,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "type": 133,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "type": 9,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "type": 93,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 98,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        },
                        {
                          "type": 99,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "xcm",
                "v1",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 42,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 105,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 106,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "def": {
                "compact": {
                  "type": 9
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 108,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "def": {
                "sequence": {
                  "type": 109
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 118,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 121,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 122,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 126,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 111,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "def": {
                "sequence": {
                  "type": 112
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 113,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 114,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 15,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 120
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 120
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "def": {
                "tuple": [
                  4,
                  93
                ]
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "xcm",
                "v0",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 11,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 124,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 113,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 125,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 97
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 97
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "Vec<v0::MultiAsset>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "v1::MultiAssets"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "def": {
                "sequence": {
                  "type": 130
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_asset",
                "MultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "All",
                      "index": 1
                    },
                    {
                      "name": "AllFungible",
                      "index": 2
                    },
                    {
                      "name": "AllNonFungible",
                      "index": 3
                    },
                    {
                      "name": "AllAbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "AllAbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "AllConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 131,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "AllConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 131,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "AbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "u128"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "AbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "instance",
                          "type": 115,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "u128"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "instance",
                          "type": 115,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_location",
                "MultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        },
                        {
                          "type": 132,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parent",
                      "index": 0
                    },
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 42,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "u128"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "OnlyChild",
                      "index": 8
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 105,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 106,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "v0::MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "v1::MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "[u8; 8]"
                        },
                        {
                          "type": 96,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM."
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM."
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "outcome",
                          "type": 96,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome."
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "remaining_weight",
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "overweight_index",
                          "type": 9,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward message is overweight and was placed in the overweight queue."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "overweight_index",
                          "type": 9,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward message from the overweight queue was executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "status",
                          "type": 36,
                          "typeName": "BalanceStatus"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some reserved balance was repatriated (moved from reserved to",
                        "another account)."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "TotalIssuanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The total issuance of an currency has been set"
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some balances were withdrawn (e.g. pay for transaction fee)"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some balances were slashed (e.g. due to mis-behavior)"
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Deposited some balance into an account"
                      ]
                    },
                    {
                      "name": "LockSet",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 116,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some funds are locked"
                      ]
                    },
                    {
                      "name": "LockRemoved",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 116,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some locked funds were unlocked"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "arctic_runtime",
                "CurrencyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 138,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ForeignAsset",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "ForeignAssetId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "arctic_runtime",
                "TokenSymbol"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ICZ",
                      "index": 0
                    },
                    {
                      "name": "KSM",
                      "index": 130
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferredMultiAssets",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "fee",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transferred `MultiAsset` with fee."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "orml_asset_registry",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RegisteredAsset",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "metadata",
                          "type": 141,
                          "typeName": "AssetMetadata<T::Balance, T::CustomMetadata>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "UpdatedAsset",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "metadata",
                          "type": 141,
                          "typeName": "AssetMetadata<T::Balance, T::CustomMetadata>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "orml_traits",
                "asset_registry",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CustomMetadata",
                  "type": 142
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "decimals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 11,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "symbol",
                      "type": 11,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "existential_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "location",
                      "type": 143,
                      "typeName": "Option<VersionedMultiLocation>"
                    },
                    {
                      "name": "additional",
                      "type": 142,
                      "typeName": "CustomMetadata"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "arctic_runtime",
                "CustomMetadata"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "fee_per_second",
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 133
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 133
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "orml_unknown_tokens",
                "module",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Deposit success."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Withdraw success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 146,
            "type": {
              "def": {
                "sequence": {
                  "type": 72
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 100,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 53,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 149,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 9,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 150,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 152,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 11,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "def": {
                "sequence": {
                  "type": 151
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "def": {
                "tuple": [
                  11,
                  11
                ]
              }
            }
          },
          {
            "id": 152,
            "type": {
              "def": {
                "sequence": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 154,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 155
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 155,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 155,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 155,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 156,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 156,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 156,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 158,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 9,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 53,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 53,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 161,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 162
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 162
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "def": {
                "sequence": {
                  "type": 163
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "def": {
                "tuple": [
                  116,
                  4
                ]
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 103,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 167,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "info",
                      "type": 171,
                      "typeName": "IdentityInfo<MaxAdditionalFields>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 168
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 170,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "def": {
                "tuple": [
                  4,
                  169
                ]
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reasonable",
                      "index": 2
                    },
                    {
                      "name": "KnownGood",
                      "index": 3
                    },
                    {
                      "name": "OutOfDate",
                      "index": 4
                    },
                    {
                      "name": "LowQuality",
                      "index": 5
                    },
                    {
                      "name": "Erroneous",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "def": {
                "sequence": {
                  "type": 168
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 172,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>"
                    },
                    {
                      "name": "display",
                      "type": 174,
                      "typeName": "Data"
                    },
                    {
                      "name": "legal",
                      "type": 174,
                      "typeName": "Data"
                    },
                    {
                      "name": "web",
                      "type": 174,
                      "typeName": "Data"
                    },
                    {
                      "name": "riot",
                      "type": 174,
                      "typeName": "Data"
                    },
                    {
                      "name": "email",
                      "type": 174,
                      "typeName": "Data"
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 204,
                      "typeName": "Option<[u8; 20]>"
                    },
                    {
                      "name": "image",
                      "type": 174,
                      "typeName": "Data"
                    },
                    {
                      "name": "twitter",
                      "type": 174,
                      "typeName": "Data"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 173
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 203,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "def": {
                "tuple": [
                  174,
                  174
                ]
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "type": 175
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "type": 176
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "type": 177
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "type": 178
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "type": 15
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "type": 179
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "type": 180
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "type": 181
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "type": 116
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "type": 182
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "type": 183
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "type": 184
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "type": 185
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "type": 186
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "type": 187
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "type": 188
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "type": 117
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "type": 189
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "type": 190
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "type": 191
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "type": 42
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "type": 192
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "type": 193
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "type": 194
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "type": 195
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "type": 196
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "type": 197
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "type": 198
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "type": 199
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "type": 200
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "type": 201
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "type": 202
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 37
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "def": {
                "sequence": {
                  "type": 173
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 42
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "def": {
                "tuple": [
                  0,
                  174
                ]
              }
            }
          },
          {
            "id": 206,
            "type": {
              "def": {
                "tuple": [
                  6,
                  207
                ]
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 64,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 209
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 213,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 210
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 210
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fields",
                      "type": 211,
                      "typeName": "IdentityFields"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 212
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "IdentityField"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "index": 1
                    },
                    {
                      "name": "Legal",
                      "index": 2
                    },
                    {
                      "name": "Web",
                      "index": 4
                    },
                    {
                      "name": "Riot",
                      "index": 8
                    },
                    {
                      "name": "Email",
                      "index": 16
                    },
                    {
                      "name": "PgpFingerprint",
                      "index": 32
                    },
                    {
                      "name": "Image",
                      "index": 64
                    },
                    {
                      "name": "Twitter",
                      "index": 128
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "def": {
                "sequence": {
                  "type": 209
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 171,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 217,
                          "typeName": "Vec<(T::AccountId, Data)>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 100,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "max_fee",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fee",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "new",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fields",
                          "type": 211,
                          "typeName": "IdentityFields"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 100,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "judgement",
                          "type": 169,
                          "typeName": "Judgement<BalanceOf<T>>"
                        },
                        {
                          "name": "identity",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "data",
                          "type": 174,
                          "typeName": "Data"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "data",
                          "type": 174,
                          "typeName": "Data"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 31
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 216,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "def": {
                "compact": {
                  "type": 31
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "def": {
                "sequence": {
                  "type": 205
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    },
                    {
                      "name": "JudgementForDifferentIdentity",
                      "index": 16,
                      "docs": [
                        "The provided judgement was for a different identity."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "arctic_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 148,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 165,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 214,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 219,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "type": 221,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 222,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 235,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 236,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 238,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "SimpleInflation",
                      "fields": [
                        {
                          "type": 240,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SimpleInflation, Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "FeesSplit",
                      "fields": [
                        {
                          "type": 241,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FeesSplit, Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Airdrop",
                      "fields": [
                        {
                          "type": 242,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Airdrop, Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Contracts",
                      "fields": [
                        {
                          "type": 248,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "type": 251,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "type": 261,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "type": 265,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "DynamicFee",
                      "fields": [
                        {
                          "type": 266,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DynamicFee, Runtime>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "type": 267,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 272,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 276,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "type": 277,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "type": 278,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 279,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 280,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 290,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 293,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 295,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 298,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 301,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 302,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>"
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "type": 303,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>"
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "CouncilMembership",
                      "fields": [
                        {
                          "type": 305,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilMembership, Runtime>"
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "type": 306,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>"
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 307,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>"
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 308,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 333,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>"
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 334,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>"
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 335,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>"
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "type": 339,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>"
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "type": 343,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>"
                        }
                      ],
                      "index": 92
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign an previously unassigned index.",
                        "",
                        "Payment: `Deposit` is reserved from the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be claimed. This must not be in use.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign an index already owned by the sender to another account. The balance reservation",
                        "is effectively transferred to the new account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be re-assigned. This must be owned by the sender.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One transfer operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (recipient)",
                        "   - Writes: Indices Accounts, System Account (recipient)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "free",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Free up an index owned by the sender.",
                        "",
                        "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                        "",
                        "- `index`: the index to be freed. This must be owned by the sender.",
                        "",
                        "Emits `IndexFreed` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        },
                        {
                          "name": "freeze",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force an index to an account. This doesn't require a deposit. If the index is already",
                        "held, then any deposit is reimbursed to its current owner.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `index`: the index to be (re-)assigned.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (original owner)",
                        "   - Writes: Indices Accounts, System Account (original owner)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Freeze an index so it will always point to the sender account. This consumes the",
                        "deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                        "non-frozen account `index`.",
                        "",
                        "- `index`: the index to be frozen in place.",
                        "",
                        "Emits `IndexFrozen` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one slash operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 223,
                          "typeName": "ParachainInherentData"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 11,
                          "typeName": "UpwardMessage"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 224,
                      "typeName": "PersistedValidationData"
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 226,
                      "typeName": "sp_trie::StorageProof"
                    },
                    {
                      "name": "downward_messages",
                      "type": 228,
                      "typeName": "Vec<InboundDownwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 230,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 10
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 225,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 10,
                      "typeName": "H"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 227,
                      "typeName": "BTreeSet<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 152
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "def": {
                "sequence": {
                  "type": 229
                }
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 11,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 94
                },
                {
                  "name": "V",
                  "type": 231
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 233
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "def": {
                "sequence": {
                  "type": 232
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 11,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "def": {
                "sequence": {
                  "type": 234
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "def": {
                "tuple": [
                  94,
                  231
                ]
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 104,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "admin",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "min_balance",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "witness",
                          "type": 237,
                          "typeName": "DestroyWitness"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a class of fungible assets.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
                        "owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "asset.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
                        "can provide accurate witness information and prevent users from manipulating state",
                        "in a way that can make it harder to destroy.",
                        "",
                        "Weight: `O(c + p + a)` where:",
                        "- `c = (witness.accounts - witness.sufficients)`",
                        "- `s = witness.sufficients`",
                        "- `a = witness.approvals`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "beneficiary",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "source",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Disallow further unprivileged transfers from an account.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Allow unprivileged transfers from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "issuer",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "issuer",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 104,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "is_frozen",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "destination",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 104,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "allow_burn",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Return the deposit (if any) of an asset account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "DestroyWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "accounts",
                      "type": 100,
                      "typeName": "u32"
                    },
                    {
                      "name": "sufficients",
                      "type": 100,
                      "typeName": "u32"
                    },
                    {
                      "name": "approvals",
                      "type": 100,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 2 Reads, 2 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "schedule",
                          "type": 239,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "schedule",
                          "type": 239,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 4 Reads, 4 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "schedule2_index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "pallet_simple_inflation",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_issuing_amount",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_fees_split",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_treasury_cut_percent",
                      "fields": [
                        {
                          "name": "val",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "pallet_airdrop",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "dispatch_user_claim",
                      "fields": [
                        {
                          "name": "icon_address",
                          "type": 42,
                          "typeName": "types::IconAddress"
                        },
                        {
                          "name": "ice_address",
                          "type": 1,
                          "typeName": "types::IceAddress"
                        },
                        {
                          "name": "message",
                          "type": 243,
                          "typeName": "types::RawPayload"
                        },
                        {
                          "name": "icon_signature",
                          "type": 244,
                          "typeName": "types::IconSignature"
                        },
                        {
                          "name": "ice_signature",
                          "type": 245,
                          "typeName": "types::IceSignature"
                        },
                        {
                          "name": "total_amount",
                          "type": 6,
                          "typeName": "types::BalanceOf<T>"
                        },
                        {
                          "name": "defi_user",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "proofs",
                          "type": 246,
                          "typeName": "types::MerkleProofs<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatchable to be called by server with privileged account",
                        "dispatch claim"
                      ]
                    },
                    {
                      "name": "dispatch_exchange_claim",
                      "fields": [
                        {
                          "name": "icon_address",
                          "type": 42,
                          "typeName": "types::IconAddress"
                        },
                        {
                          "name": "ice_address",
                          "type": 1,
                          "typeName": "types::IceAddress"
                        },
                        {
                          "name": "total_amount",
                          "type": 6,
                          "typeName": "types::BalanceOf<T>"
                        },
                        {
                          "name": "defi_user",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "proofs",
                          "type": 246,
                          "typeName": "types::MerkleProofs<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "set_airdrop_server_account",
                      "fields": [
                        {
                          "name": "new_account",
                          "type": 0,
                          "typeName": "types::AccountIdOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "change_merkle_root",
                      "fields": [
                        {
                          "name": "new_root",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "update_airdrop_state",
                      "fields": [
                        {
                          "name": "new_state",
                          "type": 43,
                          "typeName": "types::AirdropState"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 243,
            "type": {
              "def": {
                "array": {
                  "len": 289,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 247,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "def": {
                "sequence": {
                  "type": 1
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "pallet_contracts",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 249,
                          "typeName": "Weight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 250,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "data",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Makes a call to an account, optionally transferring some balance.",
                        "",
                        "# Parameters",
                        "",
                        "* `dest`: Address of the contract to call.",
                        "* `value`: The balance to transfer from the `origin` to `dest`.",
                        "* `gas_limit`: The gas limit enforced when executing the constructor.",
                        "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
                        "  caller to pay for the storage consumed.",
                        "* `data`: The input data to pass to the contract.",
                        "",
                        "* If the account is a smart-contract account, the associated code will be",
                        "executed and any value will be transferred.",
                        "* If the account is a regular account, any value will be transferred.",
                        "* If no account exists and the call value is not less than `existential_deposit`,",
                        "a regular account will be created and any value will be transferred."
                      ]
                    },
                    {
                      "name": "instantiate_with_code",
                      "fields": [
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 249,
                          "typeName": "Weight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 250,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "data",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Instantiates a new contract from the supplied `code` optionally transferring",
                        "some balance.",
                        "",
                        "This dispatchable has the same effect as calling [`Self::upload_code`] +",
                        "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
                        "also check the documentation of [`Self::upload_code`].",
                        "",
                        "# Parameters",
                        "",
                        "* `value`: The balance to transfer from the `origin` to the newly created contract.",
                        "* `gas_limit`: The gas limit enforced when executing the constructor.",
                        "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
                        "  from the caller to pay for the storage consumed.",
                        "* `code`: The contract code to deploy in raw bytes.",
                        "* `data`: The input data to pass to the contract constructor.",
                        "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
                        "",
                        "Instantiation is executed as follows:",
                        "",
                        "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
                        "  code.",
                        "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
                        "- The destination address is computed based on the sender, code_hash and the salt.",
                        "- The smart-contract account is created at the computed address.",
                        "- The `value` is transferred to the new account.",
                        "- The `deploy` function is executed in the context of the newly-created account."
                      ]
                    },
                    {
                      "name": "instantiate",
                      "fields": [
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 249,
                          "typeName": "Weight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 250,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "CodeHash<T>"
                        },
                        {
                          "name": "data",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Instantiates a contract from a previously deployed wasm binary.",
                        "",
                        "This function is identical to [`Self::instantiate_with_code`] but without the",
                        "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
                        "must be supplied."
                      ]
                    },
                    {
                      "name": "upload_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 250,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Upload new `code` without instantiating a contract from it.",
                        "",
                        "If the code does not already exist a deposit is reserved from the caller",
                        "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
                        "depends on the instrumented size of the the supplied `code`.",
                        "",
                        "If the code already exists in storage it will still return `Ok` and upgrades",
                        "the in storage version to the current",
                        "[`InstructionWeights::version`](InstructionWeights).",
                        "",
                        "# Note",
                        "",
                        "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
                        "To avoid this situation a constructor could employ access control so that it can",
                        "only be instantiated by permissioned entities. The same is true when uploading",
                        "through [`Self::instantiate_with_code`]."
                      ]
                    },
                    {
                      "name": "remove_code",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "CodeHash<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove the code stored under `code_hash` and refund the deposit to its owner.",
                        "",
                        "A code can only be removed by its original uploader (its owner) and only if it is",
                        "not used by any contract."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "code_hash",
                          "type": 10,
                          "typeName": "CodeHash<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Privileged function that changes the code of an existing contract.",
                        "",
                        "This takes care of updating refcounts and all other necessary operations. Returns",
                        "an error if either the `code_hash` or `dest` do not exist.",
                        "",
                        "# Note",
                        "",
                        "This does **not** change the address of the contract in question. This means",
                        "that the contract address is no longer derived from its code hash after calling",
                        "this dispatchable."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 249,
            "type": {
              "def": {
                "compact": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 104
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 104
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 252,
                          "typeName": "Transaction"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transact an Ethereum transaction."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "type": 253,
                          "typeName": "LegacyTransaction"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "type": 257,
                          "typeName": "EIP2930Transaction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "type": 260,
                          "typeName": "EIP1559Transaction"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_price",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "action",
                      "type": 254,
                      "typeName": "TransactionAction"
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "input",
                      "type": 11,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "signature",
                      "type": 255,
                      "typeName": "TransactionSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "H160"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Create",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 256,
                      "typeName": "TransactionRecoveryId"
                    },
                    {
                      "name": "r",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "s",
                      "type": 10,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "nonce",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_price",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "action",
                      "type": 254,
                      "typeName": "TransactionAction"
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "input",
                      "type": 11,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "access_list",
                      "type": 258,
                      "typeName": "AccessList"
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "r",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "s",
                      "type": 10,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "def": {
                "sequence": {
                  "type": 259
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 47,
                      "typeName": "Address"
                    },
                    {
                      "name": "storage_keys",
                      "type": 58,
                      "typeName": "Vec<H256>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "nonce",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "action",
                      "type": 254,
                      "typeName": "TransactionAction"
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "input",
                      "type": 11,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "access_list",
                      "type": 258,
                      "typeName": "AccessList"
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "r",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "s",
                      "type": 10,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "address",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw balance from EVM into currency/balances pallet."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "target",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "input",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 60,
                          "typeName": "U256"
                        },
                        {
                          "name": "gas_limit",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 60,
                          "typeName": "U256"
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 262,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "nonce",
                          "type": 262,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "access_list",
                          "type": 263,
                          "typeName": "Vec<(H160, Vec<H256>)>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "init",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 60,
                          "typeName": "U256"
                        },
                        {
                          "name": "gas_limit",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 60,
                          "typeName": "U256"
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 262,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "nonce",
                          "type": 262,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "access_list",
                          "type": 263,
                          "typeName": "Vec<(H160, Vec<H256>)>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 47,
                          "typeName": "H160"
                        },
                        {
                          "name": "init",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 10,
                          "typeName": "H256"
                        },
                        {
                          "name": "value",
                          "type": 60,
                          "typeName": "U256"
                        },
                        {
                          "name": "gas_limit",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 60,
                          "typeName": "U256"
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 262,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "nonce",
                          "type": 262,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "access_list",
                          "type": 263,
                          "typeName": "Vec<(H160, Vec<H256>)>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 60
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 60
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "def": {
                "sequence": {
                  "type": 264
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "def": {
                "tuple": [
                  47,
                  58
                ]
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_base_fee_per_gas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 60,
                          "typeName": "U256"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "set_elasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 62,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "pallet_dynamic_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_min_gas_price_target",
                      "fields": [
                        {
                          "name": "target",
                          "type": 60,
                          "typeName": "U256"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 268,
                          "typeName": "Vec<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 268,
            "type": {
              "def": {
                "sequence": {
                  "type": 269
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 270
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 10,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 100,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 10,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 10,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 12,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "new",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the list of invulnerable (fixed) collators."
                      ]
                    },
                    {
                      "name": "set_desired_candidates",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the ideal number of collators (not including the invulnerables).",
                        "If lowering this number, then the number of running collators could be higher than this figure.",
                        "Aside from that edge case, there should be no other way to have more collators than the desired number."
                      ]
                    },
                    {
                      "name": "set_candidacy_bond",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the candidacy bond amount."
                      ]
                    },
                    {
                      "name": "register_as_candidate",
                      "index": 3,
                      "docs": [
                        "Register this account as a collator candidate. The account must (a) already have",
                        "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                        "",
                        "This call is not available to `Invulnerable` collators."
                      ]
                    },
                    {
                      "name": "leave_intent",
                      "index": 4,
                      "docs": [
                        "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                        "session change. The `CandidacyBond` will be unreserved immediately.",
                        "",
                        "This call will fail if the total number of candidates would drop below `MinCandidates`.",
                        "",
                        "This call is not available to `Invulnerable` collators."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 273,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "arctic_runtime",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 274,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 275,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "# <weight>",
                        "- Complexity: O(A) where `A` is the number of approvals",
                        "- Db reads and writes: `Approvals`",
                        "# </weight>",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_bounty",
                      "fields": [
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "description",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a new bounty.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                        "or slashed when rejected.",
                        "",
                        "- `curator`: The curator account whom will manage this bounty.",
                        "- `fee`: The curator fee.",
                        "- `value`: The total payment amount of this bounty, curator fee included.",
                        "- `description`: The description of this bounty."
                      ]
                    },
                    {
                      "name": "approve_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "curator",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "fee",
                          "type": 104,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Assign a curator to a funded bounty.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unassign_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Unassign curator from a bounty.",
                        "",
                        "This function can only be called by the `RejectOrigin` a signed origin.",
                        "",
                        "If this function is called by the `RejectOrigin`, we assume that the curator is",
                        "malicious or inactive. As a result, we will slash the curator when possible.",
                        "",
                        "If the origin is the curator, we take this as a sign they are unable to do their job and",
                        "they willingly give up. We could slash them, but for now we allow them to recover their",
                        "deposit and exit without issue. (We may want to change this if it is abused.)",
                        "",
                        "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                        "anyone in the community to call out that a curator is not doing their due diligence, and",
                        "we should pick a new curator. In this case the curator should also be slashed.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "accept_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Accept the curator role for a bounty.",
                        "A deposit will be reserved from curator and refund upon successful payout.",
                        "",
                        "May only be called from the curator.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "award_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "beneficiary",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                        "after a delay.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to award.",
                        "- `beneficiary`: The beneficiary account whom will receive the payout.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim the payout from an awarded bounty after payout delay.",
                        "",
                        "The dispatch origin for this call must be the beneficiary of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to claim.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                        "the curator deposit will be unreserved if possible.",
                        "",
                        "Only `T::RejectOrigin` is able to cancel a bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to cancel.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "extend_bounty_expiry",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 100,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "remark",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Extend the expiry time of an active bounty.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to extend.",
                        "- `remark`: additional information.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_awesome",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R)` where `R` length of `reason`.",
                        "  - encoding and hashing of 'reason'",
                        "- DbReads: `Reasons`, `Tips`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "retract_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                        "",
                        "If successful, the original deposit will be unreserved.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                        "must have been reported by the signing account through `report_awesome` (and not",
                        "through `tip_new`).",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "Emits `TipRetracted` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`",
                        "  - Depends on the length of `T::Hash` which is fixed.",
                        "- DbReads: `Tips`, `origin account`",
                        "- DbWrites: `Reasons`, `Tips`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip_new",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "tip_value",
                          "type": 104,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Give a tip for something new; no finder's fee will be taken.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                        "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                        "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                        "    `T::Tippers`.",
                        "  - `O(R)`: hashing and encoding of reason of length `R`",
                        "- DbReads: `Tippers`, `Reasons`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "tip_value",
                          "type": 104,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Declare a tip value for an already-open tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                        "  account ID.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                        "has started.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                        "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                        "",
                        "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                        "  is weighted as if almost full i.e of length `T-1`.",
                        "- DbReads: `Tippers`, `Tips`",
                        "- DbWrites: `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close and payout a tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "The tip identified by `hash` must have finished its countdown period.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                        "  depends on the implementation of `T::Tippers`.",
                        "- DbReads: `Tips`, `Tippers`, `tip finder`",
                        "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "slash_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove and slash an already-open tip.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "As a result, the finder is slashed and the deposits are lost.",
                        "",
                        "Emits `TipSlashed` if successful.",
                        "",
                        "# <weight>",
                        "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                        "  The actual cost depends on the implementation of `T::Tippers`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 281,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 77,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 281,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 282,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 281,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 281,
            "type": {
              "def": {
                "sequence": {
                  "type": 220
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "arctic_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 283,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "type": 284,
                          "typeName": "pallet_ethereum::Origin"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 285,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 286,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 287,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 288,
                          "typeName": "cumulus_pallet_xcm::Origin"
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 289,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "pallet_ethereum",
                "RawOrigin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "H160"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "index": 0
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 291,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 291,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 291,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 291,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 292,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 72
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 72
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "MaybeHashed"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 220
                },
                {
                  "name": "Hash",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "type": 220,
                          "typeName": "T"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 294,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero."
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `pure`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                      ]
                    },
                    {
                      "name": "create_pure",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 77,
                          "typeName": "u16"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit."
                      ]
                    },
                    {
                      "name": "kill_pure",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "proxy_type",
                          "type": 76,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "index",
                          "type": 77,
                          "typeName": "u16"
                        },
                        {
                          "name": "height",
                          "type": 100,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "ext_index",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned pure proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`pure` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `pure` to create this account.",
                        "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `pure`.",
                        "- `height`: The height of the chain when the call to `pure` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created pure",
                        "account whose `pure` call has corresponding parameters."
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call_hash",
                          "type": 10,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call_hash",
                          "type": 10,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call_hash",
                          "type": 10,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made."
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "real",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 294,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 76
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 76
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "call",
                          "type": 220,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "# <weight>",
                        "O(Z + C) where Z is the length of the call and C its execution weight.",
                        "-------------------------------",
                        "- DB Weight: None",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 77,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 296,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call",
                          "type": 297,
                          "typeName": "OpaqueCall<T>"
                        },
                        {
                          "name": "store_call",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "# <weight>",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "-------------------------------",
                        "- DB Weight:",
                        "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 77,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 296,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account]",
                        "    - Write: Multisig Storage, [Caller Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 77,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "timepoint",
                          "type": 79,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 79
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 79
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperKeepOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 220
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 100
                    },
                    {
                      "type": 220,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 100,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 100,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 82,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal.",
                        "\tMust be always greater than zero.",
                        "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 100,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "conviction",
                          "type": 299,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 300,
                          "typeName": "Option<ReferendumIndex>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 100,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Locked1x",
                      "index": 1
                    },
                    {
                      "name": "Locked2x",
                      "index": 2
                    },
                    {
                      "name": "Locked3x",
                      "index": 3
                    },
                    {
                      "name": "Locked4x",
                      "index": 4
                    },
                    {
                      "name": "Locked5x",
                      "index": 5
                    },
                    {
                      "name": "Locked6x",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 32,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 220,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 100,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 220,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 249,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 32,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 220,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 100,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 220,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 100,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 249,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 10,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "value",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 304,
                          "typeName": "Renouncing"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "slash_bond",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "rerun_election",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is",
                        "started, else, nothing happens.",
                        "",
                        "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,",
                        "it is returned.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Renouncing"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "index": 0
                    },
                    {
                      "name": "RunnerUp",
                      "index": 1
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "add",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "add",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 64,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 9,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Services a single overweight XCM.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight XCM to service",
                        "- `weight_limit`: The amount of weight that XCM execution may take.",
                        "",
                        "Errors:",
                        "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
                        "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
                        "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    },
                    {
                      "name": "suspend_xcm_execution",
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
                        "suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
                        "messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
                        "message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    },
                    {
                      "name": "update_threshold_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Overwrites the amount of remaining weight under which we stop processing messages.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.threshold_weight`"
                      ]
                    },
                    {
                      "name": "update_weight_restrict_decay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Overwrites the speed to which the available weight approaches the maximum weight.",
                        "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
                      ]
                    },
                    {
                      "name": "update_xcmp_max_individual_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Overwrite the maximum amount of weight any individual message may consume.",
                        "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 309,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 320,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 300,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 126,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 126,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 310,
                          "typeName": "v0::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 315,
                          "typeName": "v1::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 314,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 121,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 122,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 310,
                          "typeName": "alloc::boxed::Box<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 311,
            "type": {
              "def": {
                "sequence": {
                  "type": 312
                }
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 313,
                          "typeName": "Vec<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "def": {
                "sequence": {
                  "type": 310
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 319,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 121,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 122,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 98,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 315,
                          "typeName": "alloc::boxed::Box<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "def": {
                "sequence": {
                  "type": 317
                }
              }
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 318,
                          "typeName": "Vec<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "def": {
                "sequence": {
                  "type": 315
                }
              }
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 321,
                          "typeName": "v0::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "v1::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 314,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 121,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 325,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 321,
                          "typeName": "alloc::boxed::Box<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "def": {
                "sequence": {
                  "type": 323
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 311,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 131,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 129,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 130,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 324,
                          "typeName": "Vec<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "def": {
                "sequence": {
                  "type": 321
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 11,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<RuntimeCall>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 319,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 121,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 325,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 98,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 326,
                          "typeName": "alloc::boxed::Box<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 327,
            "type": {
              "def": {
                "sequence": {
                  "type": 328
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 316,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 9,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 329,
                          "typeName": "Vec<Xcm<RuntimeCall>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 329,
            "type": {
              "def": {
                "sequence": {
                  "type": 326
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 331,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "def": {
                "sequence": {
                  "type": 332
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 118,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 121,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 103,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 325,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 100,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 100,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 110,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 107,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 123,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 112,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 126,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 110,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 97,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 103,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 103,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 9,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight message to service.",
                        "- `weight_limit`: The amount of weight that message execution may take.",
                        "",
                        "Errors:",
                        "- `Unknown`: Message of `index` is unknown.",
                        "- `OverLimit`: Message execution may use greater than `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the",
                        "`TransferFee`. If the sender's account is below the existential",
                        "deposit as a result of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 38,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer all remaining balance to the given account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_",
                        "balances. This means that any locked, reserved, or existential",
                        "deposits (when `keep_alive` is `true`), will not be transferred by",
                        "this function. To ensure that this function results in a killed",
                        "account, you might need to prepare the account by removing any",
                        "reference counters, storage deposits, etc...",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all`",
                        "  operation should send all of the funds the account has, causing",
                        "  the sender account to be killed (false), or transfer everything",
                        "  except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer",
                        "will not kill the origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source",
                        "account may be specified.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The sender of the transfer.",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "new_free",
                          "type": 104,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 104,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
                        "will also decrease the total issuance of the system",
                        "(`TotalIssuance`). If the new free or reserved balance is below the",
                        "existential deposit, it will reap the `AccountInfo`.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer native currencies.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 336,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer `MultiAsset`.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_with_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer native currencies specifying the fee and amount as",
                        "separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the amount to be spent to pay for execution in destination",
                        "chain. Both fee and amount will be subtracted form the callers",
                        "balance.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset_with_fee",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 336,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "fee",
                          "type": 336,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer `MultiAsset` specifying the fee and amount as separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the multiasset to be spent to pay for execution in",
                        "destination chain. Both fee and amount will be subtracted form the",
                        "callers balance For now we only accept fee and asset having the same",
                        "`MultiLocation` id.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multicurrencies",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 337,
                          "typeName": "Vec<(T::CurrencyId, T::Balance)>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer several currencies specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the currencies tuple that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiassets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 128,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 133,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transfer several `MultiAsset` specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the MultiAssets that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "v0::MultiAsset"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "v1::MultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "def": {
                "sequence": {
                  "type": 338
                }
              }
            }
          },
          {
            "id": 338,
            "type": {
              "def": {
                "tuple": [
                  137,
                  6
                ]
              }
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "orml_asset_registry",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_asset",
                      "fields": [
                        {
                          "name": "metadata",
                          "type": 141,
                          "typeName": "AssetMetadata<T::Balance, T::CustomMetadata>"
                        },
                        {
                          "name": "asset_id",
                          "type": 300,
                          "typeName": "Option<T::AssetId>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "update_asset",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "decimals",
                          "type": 300,
                          "typeName": "Option<u32>"
                        },
                        {
                          "name": "name",
                          "type": 73,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "symbol",
                          "type": 73,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "existential_deposit",
                          "type": 340,
                          "typeName": "Option<T::Balance>"
                        },
                        {
                          "name": "location",
                          "type": 341,
                          "typeName": "Option<Option<VersionedMultiLocation>>"
                        },
                        {
                          "name": "additional",
                          "type": 342,
                          "typeName": "Option<T::CustomMetadata>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 143
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 143
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 142
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 142
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some balance to another account under `currency_id`.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "transfer_native_currency",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 104,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer some native currency to another account.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "update_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 215,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 137,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 344,
                          "typeName": "AmountOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "update amount of account `who` under `currency_id`.",
                        "",
                        "The dispatch origin of this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 344,
            "type": {
              "def": {
                "primitive": "i128"
              }
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 346,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6,
                  38
                ]
              }
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAssigned",
                      "index": 0,
                      "docs": [
                        "The index was not already assigned."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 1,
                      "docs": [
                        "The index is assigned to another account."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 2,
                      "docs": [
                        "The index was not available."
                      ]
                    },
                    {
                      "name": "NotTransfer",
                      "index": 3,
                      "docs": [
                        "The source and destination accounts are identical."
                      ]
                    },
                    {
                      "name": "Permanent",
                      "index": 4,
                      "docs": [
                        "The index is permanent and may not be freed/changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 349
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 349
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 10,
                      "typeName": "relay_chain::Hash"
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 72,
                      "typeName": "(u32, u32)"
                    },
                    {
                      "name": "ingress_channels",
                      "type": 351,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    },
                    {
                      "name": "egress_channels",
                      "type": 351,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "def": {
                "sequence": {
                  "type": 352
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "def": {
                "tuple": [
                  94,
                  353
                ]
              }
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 92,
                      "typeName": "Option<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHostConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "RelayHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 94
                },
                {
                  "name": "V",
                  "type": 355
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 357
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 357,
            "type": {
              "def": {
                "sequence": {
                  "type": 358
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "def": {
                "tuple": [
                  94,
                  355
                ]
              }
            }
          },
          {
            "id": 359,
            "type": {
              "def": {
                "sequence": {
                  "type": 360
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 94
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 94,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 11,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending"
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function"
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block"
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block"
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 363
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 365,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 116,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 364,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "def": {
                "sequence": {
                  "type": 363
                }
              }
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 367
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 368,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 116
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 116,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "def": {
                "sequence": {
                  "type": 367
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "supply",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "min_balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "is_sufficient",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "accounts",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "approvals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "is_frozen",
                      "type": 38,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 372,
            "type": {
              "def": {
                "tuple": [
                  6,
                  0
                ]
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "Extra",
                  "type": 31
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "is_frozen",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "reason",
                      "type": 374,
                      "typeName": "ExistenceReason<DepositBalance>"
                    },
                    {
                      "name": "extra",
                      "type": 31,
                      "typeName": "Extra"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "ExistenceReason"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "index": 0
                    },
                    {
                      "name": "Sufficient",
                      "index": 1
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "DepositRefunded",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "def": {
                "tuple": [
                  6,
                  0,
                  0
                ]
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 378
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "name",
                      "type": 378,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "symbol",
                      "type": 378,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "is_frozen",
                      "type": 38,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "NoProvider",
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                        "maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 239
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 381,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 381,
            "type": {
              "def": {
                "sequence": {
                  "type": 239
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "pallet_fees_split",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "pallet_airdrop",
                "types",
                "SnapshotInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ice_address",
                      "type": 0,
                      "typeName": "AccountIdOf<T>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "defi_user",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "done_instant",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "done_vesting",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "vesting_block_number",
                      "type": 300,
                      "typeName": "Option<BlockNumberOf<T>>"
                    },
                    {
                      "name": "instant_block_number",
                      "type": 300,
                      "typeName": "Option<BlockNumberOf<T>>"
                    },
                    {
                      "name": "initial_transfer",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "pallet_airdrop",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "index": 0,
                      "docs": [
                        "This error will occur when signature validation failed."
                      ]
                    },
                    {
                      "name": "DeniedOperation",
                      "index": 1,
                      "docs": [
                        "Error to return when unauthorised operation is attempted"
                      ]
                    },
                    {
                      "name": "IncompleteData",
                      "index": 2,
                      "docs": [
                        "Not all data required are supplied with"
                      ]
                    },
                    {
                      "name": "ClaimAlreadyMade",
                      "index": 3,
                      "docs": [
                        "Claim has already been made so can't be made again at this time"
                      ]
                    },
                    {
                      "name": "FailedConversion",
                      "index": 4,
                      "docs": [
                        "Conversion between partially-compatible type failed"
                      ]
                    },
                    {
                      "name": "InsufficientCreditorBalance",
                      "index": 5,
                      "docs": [
                        "Creditor account do not have enough USABLE balance to",
                        "undergo this transaction"
                      ]
                    },
                    {
                      "name": "CantApplyVesting",
                      "index": 6,
                      "docs": [
                        "Some operation while applying vesting failed"
                      ]
                    },
                    {
                      "name": "NewClaimRequestBlocked",
                      "index": 7,
                      "docs": [
                        "Currently no new claim request is being accepted"
                      ]
                    },
                    {
                      "name": "NewExchangeRequestBlocked",
                      "index": 8,
                      "docs": [
                        "Currently processing of exchange request is blocked"
                      ]
                    },
                    {
                      "name": "InvalidMerkleProof",
                      "index": 9,
                      "docs": [
                        "Given proof set was invalid to expected tree root"
                      ]
                    },
                    {
                      "name": "ProofTooLarge",
                      "index": 10,
                      "docs": [
                        "Provided proof size exceed the maximum limit"
                      ]
                    },
                    {
                      "name": "IconAddressInUse",
                      "index": 11,
                      "docs": [
                        "This icon address have already been mapped to another ice address"
                      ]
                    },
                    {
                      "name": "IceAddressInUse",
                      "index": 12,
                      "docs": [
                        "This ice address have already been mapped to another icon address"
                      ]
                    },
                    {
                      "name": "IncompatibleAccountId",
                      "index": 13,
                      "docs": [
                        "Unexpected format of AccountId"
                      ]
                    },
                    {
                      "name": "NoMerkleRoot",
                      "index": 14,
                      "docs": [
                        "Merkle root is not set on chain yet"
                      ]
                    },
                    {
                      "name": "NoCreditorAccount",
                      "index": 15,
                      "docs": [
                        "Creditor account is not set on chain yet"
                      ]
                    },
                    {
                      "name": "InvalidIceAddress",
                      "index": 16,
                      "docs": [
                        "Provided ice address is not in expected format"
                      ]
                    },
                    {
                      "name": "InvalidIceSignature",
                      "index": 17,
                      "docs": [
                        "Invalid signature provided"
                      ]
                    },
                    {
                      "name": "FailedExtractingIceAddress",
                      "index": 18,
                      "docs": [
                        "Couldn't get embedded ice address from message"
                      ]
                    },
                    {
                      "name": "InvalidMessagePayload",
                      "index": 19,
                      "docs": [
                        "Given message payload is invalid or is in unexpected format"
                      ]
                    },
                    {
                      "name": "ArithmeticError",
                      "index": 20,
                      "docs": [
                        "Internal arithmetic error"
                      ]
                    },
                    {
                      "name": "InvalidClaimAmount",
                      "index": 21,
                      "docs": [
                        "Claim amount was not expected in this exchanged airdrop"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "pallet_contracts",
                "wasm",
                "PrefabWasmModule"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "instruction_weights_version",
                      "type": 100,
                      "typeName": "u32"
                    },
                    {
                      "name": "initial",
                      "type": 100,
                      "typeName": "u32"
                    },
                    {
                      "name": "maximum",
                      "type": 100,
                      "typeName": "u32"
                    },
                    {
                      "name": "code",
                      "type": 391,
                      "typeName": "RelaxedCodeVec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "pallet_contracts",
                "wasm",
                "OwnerInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountIdOf<T>"
                    },
                    {
                      "name": "deposit",
                      "type": 104,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "refcount",
                      "type": 103,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "pallet_contracts",
                "storage",
                "ContractInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_id",
                      "type": 394,
                      "typeName": "TrieId"
                    },
                    {
                      "name": "code_hash",
                      "type": 10,
                      "typeName": "CodeHash<T>"
                    },
                    {
                      "name": "storage_bytes",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "storage_items",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "storage_byte_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "storage_item_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "storage_base_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 396
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 397,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "pallet_contracts",
                "storage",
                "DeletedContract"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_id",
                      "type": 394,
                      "typeName": "TrieId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 397,
            "type": {
              "def": {
                "sequence": {
                  "type": 396
                }
              }
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "Schedule"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "limits",
                      "type": 399,
                      "typeName": "Limits"
                    },
                    {
                      "name": "instruction_weights",
                      "type": 400,
                      "typeName": "InstructionWeights<T>"
                    },
                    {
                      "name": "host_fn_weights",
                      "type": 401,
                      "typeName": "HostFnWeights<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "Limits"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "event_topics",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "stack_height",
                      "type": 300,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "globals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "parameters",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "memory_pages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "table_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_table_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "subject_len",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call_depth",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "payload_len",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "InstructionWeights"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64const",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64load",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64store",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "select",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "r#if",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_if",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_table",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_table_per_entry",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call_indirect",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call_indirect_per_param",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "local_get",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "local_set",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "local_tee",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "global_get",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "global_set",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "memory_current",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "memory_grow",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64clz",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ctz",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64popcnt",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64eqz",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64extendsi32",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64extendui32",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i32wrapi64",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64eq",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ne",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64lts",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ltu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64gts",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64gtu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64les",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64leu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ges",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64geu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64add",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64sub",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64mul",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64divs",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64divu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64rems",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64remu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64and",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64or",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64xor",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64shl",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64shrs",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64shru",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64rotl",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64rotr",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "HostFnWeights"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "caller",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "is_contract",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "code_hash",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "own_code_hash",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "caller_is_origin",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "address",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "gas_left",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "balance",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "value_transferred",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "minimum_balance",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "block_number",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "now",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "weight_to_fee",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "gas",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "input",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "input_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "r#return",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "return_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "terminate",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "random",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "deposit_event",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "deposit_event_per_topic",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "deposit_event_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "debug_message",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "set_storage",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "set_storage_per_new_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "set_storage_per_old_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "set_code_hash",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "clear_storage",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "clear_storage_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "contains_storage",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "contains_storage_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "get_storage",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "get_storage_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "take_storage",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "take_storage_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "transfer",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "call",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "delegate_call",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "call_transfer_surcharge",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "call_per_cloned_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "instantiate",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "instantiate_transfer_surcharge",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "instantiate_per_salt_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_sha2_256",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_sha2_256_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_keccak_256",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_keccak_256_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_blake2_256",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_blake2_256_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_blake2_128",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash_blake2_128_per_byte",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "ecdsa_recover",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "ecdsa_to_eth_address",
                      "type": 9,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "pallet_contracts",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidScheduleVersion",
                      "index": 0,
                      "docs": [
                        "A new schedule must have a greater version than the current one."
                      ]
                    },
                    {
                      "name": "InvalidCallFlags",
                      "index": 1,
                      "docs": [
                        "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
                      ]
                    },
                    {
                      "name": "OutOfGas",
                      "index": 2,
                      "docs": [
                        "The executed contract exhausted its gas limit."
                      ]
                    },
                    {
                      "name": "OutputBufferTooSmall",
                      "index": 3,
                      "docs": [
                        "The output buffer supplied to a contract API call was too small."
                      ]
                    },
                    {
                      "name": "TransferFailed",
                      "index": 4,
                      "docs": [
                        "Performing the requested transfer failed. Probably because there isn't enough",
                        "free balance in the sender's account."
                      ]
                    },
                    {
                      "name": "MaxCallDepthReached",
                      "index": 5,
                      "docs": [
                        "Performing a call was denied because the calling depth reached the limit",
                        "of what is specified in the schedule."
                      ]
                    },
                    {
                      "name": "ContractNotFound",
                      "index": 6,
                      "docs": [
                        "No contract was found at the specified address."
                      ]
                    },
                    {
                      "name": "CodeTooLarge",
                      "index": 7,
                      "docs": [
                        "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                        "current schedule."
                      ]
                    },
                    {
                      "name": "CodeNotFound",
                      "index": 8,
                      "docs": [
                        "No code could be found at the supplied code hash."
                      ]
                    },
                    {
                      "name": "OutOfBounds",
                      "index": 9,
                      "docs": [
                        "A buffer outside of sandbox memory was passed to a contract API function."
                      ]
                    },
                    {
                      "name": "DecodingFailed",
                      "index": 10,
                      "docs": [
                        "Input passed to a contract API function failed to decode as expected type."
                      ]
                    },
                    {
                      "name": "ContractTrapped",
                      "index": 11,
                      "docs": [
                        "Contract trapped during execution."
                      ]
                    },
                    {
                      "name": "ValueTooLarge",
                      "index": 12,
                      "docs": [
                        "The size defined in `T::MaxValueSize` was exceeded."
                      ]
                    },
                    {
                      "name": "TerminatedWhileReentrant",
                      "index": 13,
                      "docs": [
                        "Termination of a contract is not allowed while the contract is already",
                        "on the call stack. Can be triggered by `seal_terminate`."
                      ]
                    },
                    {
                      "name": "InputForwarded",
                      "index": 14,
                      "docs": [
                        "`seal_call` forwarded this contracts input. It therefore is no longer available."
                      ]
                    },
                    {
                      "name": "RandomSubjectTooLong",
                      "index": 15,
                      "docs": [
                        "The subject passed to `seal_random` exceeds the limit."
                      ]
                    },
                    {
                      "name": "TooManyTopics",
                      "index": 16,
                      "docs": [
                        "The amount of topics passed to `seal_deposit_events` exceeds the limit."
                      ]
                    },
                    {
                      "name": "DuplicateTopics",
                      "index": 17,
                      "docs": [
                        "The topics passed to `seal_deposit_events` contains at least one duplicate."
                      ]
                    },
                    {
                      "name": "NoChainExtension",
                      "index": 18,
                      "docs": [
                        "The chain does not provide a chain extension. Calling the chain extension results",
                        "in this error. Note that this usually  shouldn't happen as deploying such contracts",
                        "is rejected."
                      ]
                    },
                    {
                      "name": "DeletionQueueFull",
                      "index": 19,
                      "docs": [
                        "Removal of a contract failed because the deletion queue is full.",
                        "",
                        "This can happen when calling `seal_terminate`.",
                        "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
                        "Trying again during another block is the only way to resolve this issue."
                      ]
                    },
                    {
                      "name": "DuplicateContract",
                      "index": 20,
                      "docs": [
                        "A contract with the same AccountId already exists."
                      ]
                    },
                    {
                      "name": "TerminatedInConstructor",
                      "index": 21,
                      "docs": [
                        "A contract self destructed in its constructor.",
                        "",
                        "This can be triggered by a call to `seal_terminate`."
                      ]
                    },
                    {
                      "name": "DebugMessageInvalidUTF8",
                      "index": 22,
                      "docs": [
                        "The debug message specified to `seal_debug_message` does contain invalid UTF-8."
                      ]
                    },
                    {
                      "name": "ReentranceDenied",
                      "index": 23,
                      "docs": [
                        "A call tried to invoke a contract that is flagged as non-reentrant."
                      ]
                    },
                    {
                      "name": "StorageDepositNotEnoughFunds",
                      "index": 24,
                      "docs": [
                        "Origin doesn't have enough balance to pay the required storage deposits."
                      ]
                    },
                    {
                      "name": "StorageDepositLimitExhausted",
                      "index": 25,
                      "docs": [
                        "More storage was created than allowed by the storage deposit limit."
                      ]
                    },
                    {
                      "name": "CodeInUse",
                      "index": 26,
                      "docs": [
                        "Code removal was denied because the code is still in use by at least one contract."
                      ]
                    },
                    {
                      "name": "ContractReverted",
                      "index": 27,
                      "docs": [
                        "The contract ran to completion but decided to revert its storage changes.",
                        "Please note that this error is only returned from extrinsics. When called directly",
                        "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
                        "to determine whether a reversion has taken place."
                      ]
                    },
                    {
                      "name": "CodeRejected",
                      "index": 28,
                      "docs": [
                        "The contract's code was found to be invalid during validation or instrumentation.",
                        "A more detailed error can be found on the node console if debug messages are enabled",
                        "or in the debug buffer which is returned to RPC clients."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 403,
            "type": {
              "def": {
                "sequence": {
                  "type": 404
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "def": {
                "tuple": [
                  252,
                  405,
                  410
                ]
              }
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "from",
                      "type": 47,
                      "typeName": "H160"
                    },
                    {
                      "name": "to",
                      "type": 406,
                      "typeName": "Option<H160>"
                    },
                    {
                      "name": "contract_address",
                      "type": 406,
                      "typeName": "Option<H160>"
                    },
                    {
                      "name": "logs",
                      "type": 407,
                      "typeName": "Vec<Log>"
                    },
                    {
                      "name": "logs_bloom",
                      "type": 408,
                      "typeName": "Bloom"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 47
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 47
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 407,
            "type": {
              "def": {
                "sequence": {
                  "type": 57
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 409,
                      "typeName": "[u8; BLOOM_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "def": {
                "array": {
                  "len": 256,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "type": 411,
                          "typeName": "EIP658ReceiptData"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "type": 411,
                          "typeName": "EIP2930ReceiptData"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "type": 411,
                          "typeName": "EIP1559ReceiptData"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "used_gas",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "logs_bloom",
                      "type": 408,
                      "typeName": "Bloom"
                    },
                    {
                      "name": "logs",
                      "type": 407,
                      "typeName": "Vec<Log>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 252
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 413,
                      "typeName": "Header"
                    },
                    {
                      "name": "transactions",
                      "type": 415,
                      "typeName": "Vec<T>"
                    },
                    {
                      "name": "ommers",
                      "type": 416,
                      "typeName": "Vec<Header>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "ommers_hash",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "beneficiary",
                      "type": 47,
                      "typeName": "H160"
                    },
                    {
                      "name": "state_root",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "transactions_root",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "receipts_root",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "logs_bloom",
                      "type": 408,
                      "typeName": "Bloom"
                    },
                    {
                      "name": "difficulty",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "number",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_used",
                      "type": 60,
                      "typeName": "U256"
                    },
                    {
                      "name": "timestamp",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "extra_data",
                      "type": 11,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "mix_hash",
                      "type": 10,
                      "typeName": "H256"
                    },
                    {
                      "name": "nonce",
                      "type": 414,
                      "typeName": "H64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 116,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 415,
            "type": {
              "def": {
                "sequence": {
                  "type": 252
                }
              }
            }
          },
          {
            "id": 416,
            "type": {
              "def": {
                "sequence": {
                  "type": 413
                }
              }
            }
          },
          {
            "id": 417,
            "type": {
              "def": {
                "sequence": {
                  "type": 410
                }
              }
            }
          },
          {
            "id": 418,
            "type": {
              "def": {
                "sequence": {
                  "type": 405
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 420,
            "type": {
              "def": {
                "tuple": [
                  47,
                  10
                ]
              }
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    },
                    {
                      "name": "GasLimitTooLow",
                      "index": 6,
                      "docs": [
                        "Gas limit is too low."
                      ]
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "index": 7,
                      "docs": [
                        "Gas limit is too high."
                      ]
                    },
                    {
                      "name": "Undefined",
                      "index": 8,
                      "docs": [
                        "Undefined error."
                      ]
                    },
                    {
                      "name": "Reentrancy",
                      "index": 9,
                      "docs": [
                        "EVM reentrancy"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 423
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 424,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 10
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Hash"
                        },
                        {
                          "type": 32,
                          "typeName": "Option<Author>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 424,
            "type": {
              "def": {
                "sequence": {
                  "type": 423
                }
              }
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 64,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 428
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 429,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "CandidateInfo"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "def": {
                "sequence": {
                  "type": 428
                }
              }
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCandidates",
                      "index": 0,
                      "docs": [
                        "Too many candidates"
                      ]
                    },
                    {
                      "name": "TooFewCandidates",
                      "index": 1,
                      "docs": [
                        "Too few candidates"
                      ]
                    },
                    {
                      "name": "Unknown",
                      "index": 2,
                      "docs": [
                        "Unknown error"
                      ]
                    },
                    {
                      "name": "Permission",
                      "index": 3,
                      "docs": [
                        "Permission issue"
                      ]
                    },
                    {
                      "name": "AlreadyCandidate",
                      "index": 4,
                      "docs": [
                        "User is already a candidate"
                      ]
                    },
                    {
                      "name": "NotCandidate",
                      "index": 5,
                      "docs": [
                        "User is not a candidate"
                      ]
                    },
                    {
                      "name": "TooManyInvulnerables",
                      "index": 6,
                      "docs": [
                        "Too many invulnerables"
                      ]
                    },
                    {
                      "name": "AlreadyInvulnerable",
                      "index": 7,
                      "docs": [
                        "User is already an Invulnerable"
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 8,
                      "docs": [
                        "Account has no associated validator ID"
                      ]
                    },
                    {
                      "name": "ValidatorNotRegistered",
                      "index": 9,
                      "docs": [
                        "Validator ID is not yet registered"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 431,
            "type": {
              "def": {
                "sequence": {
                  "type": 432
                }
              }
            }
          },
          {
            "id": 432,
            "type": {
              "def": {
                "tuple": [
                  0,
                  273
                ]
              }
            }
          },
          {
            "id": 433,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 434,
            "type": {
              "def": {
                "tuple": [
                  435,
                  11
                ]
              }
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 15,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 437,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 274
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 438,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 438,
            "type": {
              "def": {
                "sequence": {
                  "type": 274
                }
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 433,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 116,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "index": 4,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "pallet_bounties",
                "Bounty"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "curator_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "status",
                      "type": 444,
                      "typeName": "BountyStatus<AccountId, BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "pallet_bounties",
                "BountyStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "index": 1
                    },
                    {
                      "name": "Funded",
                      "index": 2
                    },
                    {
                      "name": "CuratorProposed",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "update_due",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "unlock_at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "ReasonTooBig",
                      "index": 2,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "UnexpectedStatus",
                      "index": 3,
                      "docs": [
                        "The bounty status is unexpected."
                      ]
                    },
                    {
                      "name": "RequireCurator",
                      "index": 4,
                      "docs": [
                        "Require bounty curator."
                      ]
                    },
                    {
                      "name": "InvalidValue",
                      "index": 5,
                      "docs": [
                        "Invalid bounty value."
                      ]
                    },
                    {
                      "name": "InvalidFee",
                      "index": 6,
                      "docs": [
                        "Invalid bounty fee."
                      ]
                    },
                    {
                      "name": "PendingPayout",
                      "index": 7,
                      "docs": [
                        "A bounty payout is pending.",
                        "To cancel the bounty, you must unassign and slash the curator."
                      ]
                    },
                    {
                      "name": "Premature",
                      "index": 8,
                      "docs": [
                        "The bounties cannot be claimed/closed because it's still in the countdown period."
                      ]
                    },
                    {
                      "name": "HasActiveChildBounty",
                      "index": 9,
                      "docs": [
                        "The bounty cannot be closed because it has active child bounties."
                      ]
                    },
                    {
                      "name": "TooManyQueued",
                      "index": 10,
                      "docs": [
                        "Too many approvals are already queued."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "pallet_tips",
                "OpenTip"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "reason",
                      "type": 10,
                      "typeName": "Hash"
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "closes",
                      "type": 300,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "tips",
                      "type": 87,
                      "typeName": "Vec<(AccountId, Balance)>"
                    },
                    {
                      "name": "finders_fee",
                      "type": 38,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 449,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReasonTooBig",
                      "index": 0,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "AlreadyKnown",
                      "index": 1,
                      "docs": [
                        "The tip was already found/started."
                      ]
                    },
                    {
                      "name": "UnknownTip",
                      "index": 2,
                      "docs": [
                        "The tip hash is unknown."
                      ]
                    },
                    {
                      "name": "NotFinder",
                      "index": 3,
                      "docs": [
                        "The account attempting to retract the tip is not the finder of the tip."
                      ]
                    },
                    {
                      "name": "StillOpen",
                      "index": 4,
                      "docs": [
                        "The tip cannot be claimed/closed because there are not enough tippers yet."
                      ]
                    },
                    {
                      "name": "Premature",
                      "index": 5,
                      "docs": [
                        "The tip cannot be claimed/closed because it's still in the countdown period."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "type": 451,
                          "typeName": "Option<(AccountId, Balance)>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 451,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 88
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 88
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 453,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooLarge",
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 455,
            "type": {
              "def": {
                "sequence": {
                  "type": 456
                }
              }
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 457
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 457
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV3"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 292
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 282
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 73,
                      "typeName": "Option<Vec<u8>>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 292,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 291,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 282,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 459,
            "type": {
              "def": {
                "tuple": [
                  460,
                  6
                ]
              }
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 461
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 462,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 76
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "proxy_type",
                      "type": 76,
                      "typeName": "ProxyType"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 462,
            "type": {
              "def": {
                "sequence": {
                  "type": 461
                }
              }
            }
          },
          {
            "id": 463,
            "type": {
              "def": {
                "tuple": [
                  464,
                  6
                ]
              }
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 465
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 466,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 10
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "call_hash",
                      "type": 10,
                      "typeName": "Hash"
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 466,
            "type": {
              "def": {
                "sequence": {
                  "type": 465
                }
              }
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 468,
            "type": {
              "def": {
                "tuple": [
                  0,
                  1
                ]
              }
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 79,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 64,
                      "typeName": "Vec<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 470,
            "type": {
              "def": {
                "tuple": [
                  297,
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 472,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 58,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 473,
            "type": {
              "def": {
                "sequence": {
                  "type": 474
                }
              }
            }
          },
          {
            "id": 474,
            "type": {
              "def": {
                "tuple": [
                  4,
                  10,
                  0
                ]
              }
            }
          },
          {
            "id": 475,
            "type": {
              "def": {
                "tuple": [
                  64,
                  6
                ]
              }
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "pallet_democracy",
                "PreimageStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 11,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber"
                        },
                        {
                          "name": "expiry",
                          "type": 300,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 10
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 478,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 38,
                          "typeName": "bool"
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 478,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 10
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "proposal_hash",
                      "type": 10,
                      "typeName": "Hash"
                    },
                    {
                      "name": "threshold",
                      "type": 81,
                      "typeName": "VoteThreshold"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "tally",
                      "type": 479,
                      "typeName": "Tally<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 481,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>"
                        },
                        {
                          "name": "delegations",
                          "type": 483,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 484,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 299,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "delegations",
                          "type": 483,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 484,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 481,
            "type": {
              "def": {
                "sequence": {
                  "type": 482
                }
              }
            }
          },
          {
            "id": 482,
            "type": {
              "def": {
                "tuple": [
                  4,
                  82
                ]
              }
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 485,
            "type": {
              "def": {
                "tuple": [
                  10,
                  81
                ]
              }
            }
          },
          {
            "id": 486,
            "type": {
              "def": {
                "tuple": [
                  4,
                  64
                ]
              }
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "pallet_democracy",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "index": 9,
                      "docs": [
                        "Preimage already noted"
                      ]
                    },
                    {
                      "name": "NotImminent",
                      "index": 10,
                      "docs": [
                        "Not imminent"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 11,
                      "docs": [
                        "Too early"
                      ]
                    },
                    {
                      "name": "Imminent",
                      "index": 12,
                      "docs": [
                        "Imminent"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "index": 13,
                      "docs": [
                        "Preimage not found"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "index": 14,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "index": 15,
                      "docs": [
                        "Invalid preimage"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "index": 16,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 19,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "index": 21,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "index": 24,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "index": 25,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 26,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 27,
                      "docs": [
                        "Maximum number of proposals reached."
                      ]
                    },
                    {
                      "name": "VotingPeriodLow",
                      "index": 28,
                      "docs": [
                        "Voting period too low"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 489,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 58,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount"
                    },
                    {
                      "name": "ayes",
                      "type": 64,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "nays",
                      "type": 64,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 58,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 494,
            "type": {
              "def": {
                "sequence": {
                  "type": 495
                }
              }
            }
          },
          {
            "id": 495,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "SeatHolder"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Voter"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 64,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 497,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "index": 0,
                      "docs": [
                        "Cannot vote when no candidates or members exist."
                      ]
                    },
                    {
                      "name": "NoVotes",
                      "index": 1,
                      "docs": [
                        "Must vote for at least one candidate."
                      ]
                    },
                    {
                      "name": "TooManyVotes",
                      "index": 2,
                      "docs": [
                        "Cannot vote more than candidates."
                      ]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "index": 3,
                      "docs": [
                        "Cannot vote more than maximum allowed."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 4,
                      "docs": [
                        "Cannot vote with stake less than minimum balance."
                      ]
                    },
                    {
                      "name": "UnableToPayBond",
                      "index": 5,
                      "docs": [
                        "Voter can not pay voting bond."
                      ]
                    },
                    {
                      "name": "MustBeVoter",
                      "index": 6,
                      "docs": [
                        "Must be a voter."
                      ]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "index": 7,
                      "docs": [
                        "Duplicated candidate submission."
                      ]
                    },
                    {
                      "name": "TooManyCandidates",
                      "index": 8,
                      "docs": [
                        "Too many candidates have been created."
                      ]
                    },
                    {
                      "name": "MemberSubmit",
                      "index": 9,
                      "docs": [
                        "Member cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "index": 10,
                      "docs": [
                        "Runner cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "index": 11,
                      "docs": [
                        "Candidate does not have enough funds."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 12,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "index": 13,
                      "docs": [
                        "The provided count of number of candidates is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "index": 14,
                      "docs": [
                        "The provided count of number of votes is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "index": 15,
                      "docs": [
                        "The renouncing origin presented a wrong `Renouncing` parameter."
                      ]
                    },
                    {
                      "name": "InvalidReplacement",
                      "index": 16,
                      "docs": [
                        "Prediction regarding replacement after member removal is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 64,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 499,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 500,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 64,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 501,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 502,
            "type": {
              "def": {
                "sequence": {
                  "type": 503
                }
              }
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 94,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 504,
                      "typeName": "InboundState"
                    },
                    {
                      "name": "message_metadata",
                      "type": 505,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 504,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 505,
            "type": {
              "def": {
                "sequence": {
                  "type": 506
                }
              }
            }
          },
          {
            "id": 506,
            "type": {
              "def": {
                "tuple": [
                  4,
                  507
                ]
              }
            }
          },
          {
            "id": 507,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "XcmpMessageFormat"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "index": 0
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "index": 1
                    },
                    {
                      "name": "Signals",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 508,
            "type": {
              "def": {
                "tuple": [
                  94,
                  4
                ]
              }
            }
          },
          {
            "id": 509,
            "type": {
              "def": {
                "sequence": {
                  "type": 510
                }
              }
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 94,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 511,
                      "typeName": "OutboundState"
                    },
                    {
                      "name": "signals_exist",
                      "type": 38,
                      "typeName": "bool"
                    },
                    {
                      "name": "first_index",
                      "type": 77,
                      "typeName": "u16"
                    },
                    {
                      "name": "last_index",
                      "type": 77,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 511,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 512,
            "type": {
              "def": {
                "tuple": [
                  94,
                  77
                ]
              }
            }
          },
          {
            "id": 513,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "threshold_weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 514,
            "type": {
              "def": {
                "tuple": [
                  94,
                  4,
                  11
                ]
              }
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "index": 0,
                      "docs": [
                        "Failed to send XCM message."
                      ]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "index": 1,
                      "docs": [
                        "Bad XCM origin."
                      ]
                    },
                    {
                      "name": "BadXcm",
                      "index": 2,
                      "docs": [
                        "Bad XCM data."
                      ]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "index": 3,
                      "docs": [
                        "Bad overweight index."
                      ]
                    },
                    {
                      "name": "WeightOverLimit",
                      "index": 4,
                      "docs": [
                        "Provided weight is possibly not enough to execute the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 516,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 517,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 518,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "ConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "PageIndexData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "overweight_count",
                      "type": 9,
                      "typeName": "OverweightIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 520,
            "type": {
              "def": {
                "sequence": {
                  "type": 521
                }
              }
            }
          },
          {
            "id": 521,
            "type": {
              "def": {
                "tuple": [
                  4,
                  11
                ]
              }
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0,
                      "docs": [
                        "The message index given is unknown."
                      ]
                    },
                    {
                      "name": "OverLimit",
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 523,
            "type": {
              "def": {
                "tuple": [
                  0,
                  137
                ]
              }
            }
          },
          {
            "id": 524,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 525
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 526,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 525,
            "type": {
              "path": [
                "orml_tokens",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 116,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 526,
            "type": {
              "def": {
                "sequence": {
                  "type": 525
                }
              }
            }
          },
          {
            "id": 527,
            "type": {
              "path": [
                "orml_tokens",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 528,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 529
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 530,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 529,
            "type": {
              "path": [
                "orml_tokens",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 116
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 116,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 530,
            "type": {
              "def": {
                "sequence": {
                  "type": 529
                }
              }
            }
          },
          {
            "id": 531,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low"
                      ]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 1,
                      "docs": [
                        "Cannot convert Amount into Balance type"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 2,
                      "docs": [
                        "Failed because liquidity restrictions due to locking"
                      ]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "index": 3,
                      "docs": [
                        "Failed because the maximum locks was exceeded"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 5,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 532,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetHasNoReserve",
                      "index": 0,
                      "docs": [
                        "Asset has no reserve location."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "index": 1,
                      "docs": [
                        "Not cross-chain transfer."
                      ]
                    },
                    {
                      "name": "InvalidDest",
                      "index": 2,
                      "docs": [
                        "Invalid transfer destination."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "index": 3,
                      "docs": [
                        "Currency is not cross-chain transferable."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 4,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "index": 5,
                      "docs": [
                        "XCM execution failed."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the",
                        "destination chain."
                      ]
                    },
                    {
                      "name": "InvalidAncestry",
                      "index": 7,
                      "docs": [
                        "Could not get ancestry of asset reserve location."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "index": 8,
                      "docs": [
                        "The MultiAsset is invalid."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 9,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 10,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    },
                    {
                      "name": "DistinctReserveForAssetAndFee",
                      "index": 11,
                      "docs": [
                        "We tried sending distinct asset and fee but they have different",
                        "reserve chains."
                      ]
                    },
                    {
                      "name": "ZeroFee",
                      "index": 12,
                      "docs": [
                        "The fee is zero."
                      ]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 13,
                      "docs": [
                        "The transfering asset amount is zero."
                      ]
                    },
                    {
                      "name": "TooManyAssetsBeingSent",
                      "index": 14,
                      "docs": [
                        "The number of assets to be sent is over the maximum."
                      ]
                    },
                    {
                      "name": "AssetIndexNonExistent",
                      "index": 15,
                      "docs": [
                        "The specified index does not exist in a MultiAssets struct."
                      ]
                    },
                    {
                      "name": "FeeNotEnough",
                      "index": 16,
                      "docs": [
                        "Fee is not enough."
                      ]
                    },
                    {
                      "name": "NotSupportedMultiLocation",
                      "index": 17,
                      "docs": [
                        "Not supported MultiLocation"
                      ]
                    },
                    {
                      "name": "MinXcmFeeNotDefined",
                      "index": 18,
                      "docs": [
                        "MinXcmFee not registered for certain reserve location"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 533,
            "type": {
              "path": [
                "orml_asset_registry",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetNotFound",
                      "index": 0,
                      "docs": [
                        "Asset was not found."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 1,
                      "docs": [
                        "The version of the `VersionedMultiLocation` value used is not able",
                        "to be interpreted."
                      ]
                    },
                    {
                      "name": "InvalidAssetId",
                      "index": 2,
                      "docs": [
                        "The asset id is invalid."
                      ]
                    },
                    {
                      "name": "ConflictingLocation",
                      "index": 3,
                      "docs": [
                        "Another asset was already register with this location."
                      ]
                    },
                    {
                      "name": "ConflictingAssetId",
                      "index": 4,
                      "docs": [
                        "Another asset was already register with this asset id."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 534,
            "type": {
              "def": {
                "tuple": [
                  97,
                  97
                ]
              }
            }
          },
          {
            "id": 535,
            "type": {
              "def": {
                "tuple": [
                  97,
                  11
                ]
              }
            }
          },
          {
            "id": 536,
            "type": {
              "path": [
                "orml_unknown_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low."
                      ]
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 1,
                      "docs": [
                        "The operation will cause balance to overflow."
                      ]
                    },
                    {
                      "name": "UnhandledAsset",
                      "index": 2,
                      "docs": [
                        "Unhandled asset."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 537,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 0,
                      "docs": [
                        "Unable to convert the Amount type into Balance."
                      ]
                    },
                    {
                      "name": "BalanceTooLow",
                      "index": 1,
                      "docs": [
                        "Balance is too low."
                      ]
                    },
                    {
                      "name": "DepositFailed",
                      "index": 2,
                      "docs": [
                        "Deposit result is not expected"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 215
                },
                {
                  "name": "Call",
                  "type": 220
                },
                {
                  "name": "Signature",
                  "type": 539
                },
                {
                  "name": "Extra",
                  "type": 543
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 552,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 540,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 541,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 542,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 540,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 245,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 541,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 245,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 542,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 244,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 543,
            "type": {
              "def": {
                "tuple": [
                  544,
                  545,
                  546,
                  547,
                  549,
                  550,
                  551
                ]
              }
            }
          },
          {
            "id": 544,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 545,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 546,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 547,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 548,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 548,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 549,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 100,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 550,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 551,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 104,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 552,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 215
                },
                {
                  "name": "Call",
                  "type": 220
                },
                {
                  "name": "Signature",
                  "type": 539
                },
                {
                  "name": "Extra",
                  "type": 543
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 553,
            "type": {
              "path": [
                "arctic_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 16
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 146
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 147
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 145
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 148
          },
          "event": {
            "ty": 19
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 153,
              "value": [
                224,
                209,
                169,
                62,
                1,
                0,
                0,
                0,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                144,
                205,
                36,
                5,
                0,
                0,
                0,
                0,
                1,
                112,
                250,
                228,
                168,
                46,
                1,
                0,
                0,
                1,
                0,
                152,
                247,
                62,
                93,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                144,
                205,
                36,
                5,
                0,
                0,
                0,
                0,
                1,
                112,
                130,
                55,
                19,
                163,
                1,
                0,
                0,
                1,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                1,
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                144,
                205,
                36,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 157,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 159,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 160,
              "value": [
                56,
                97,
                114,
                99,
                116,
                105,
                99,
                45,
                116,
                101,
                115,
                116,
                110,
                101,
                116,
                56,
                97,
                114,
                99,
                116,
                105,
                99,
                45,
                116,
                101,
                115,
                116,
                110,
                101,
                116,
                1,
                0,
                0,
                0,
                3,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                52,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                1,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                234,
                147,
                227,
                241,
                111,
                61,
                105,
                98,
                2,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                88,
                34,
                17,
                246,
                91,
                177,
                75,
                137,
                4,
                0,
                0,
                0,
                230,
                91,
                0,
                228,
                108,
                237,
                208,
                170,
                2,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                104,
                182,
                107,
                161,
                34,
                201,
                63,
                167,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 77,
              "value": [
                160,
                8
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 164
          },
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 165
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 9,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 1
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 166
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 205
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 206
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "ty": {
                  "Plain": 208
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "ty": 214
          },
          "event": {
            "ty": 28
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                254,
                244,
                46,
                139,
                14,
                14,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                194,
                31,
                85,
                185,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "ty": 6,
              "value": [
                0,
                160,
                11,
                220,
                220,
                32,
                234,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": {
            "ty": 218
          },
          "index": 2
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 219
          },
          "event": {
            "ty": 29
          },
          "constants": [],
          "error": {
            "ty": 345
          },
          "index": 3
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "entries": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 346
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The lookup from index to account."
                ]
              }
            ]
          },
          "calls": {
            "ty": 221
          },
          "event": {
            "ty": 33
          },
          "constants": [
            {
              "name": "Deposit",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit needed for reserving an index."
              ]
            }
          ],
          "error": {
            "ty": 347
          },
          "index": 4
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 224
                },
                "default": [
                  0
                ],
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The relay chain block number associated with the last parachain block."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "ty": {
                  "Plain": 348
                },
                "default": [
                  0
                ],
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "ty": {
                  "Plain": 226
                },
                "default": [
                  0
                ],
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "ty": {
                  "Plain": 350
                },
                "default": [
                  0
                ],
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 354
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "ty": {
                  "Plain": 355
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "ty": {
                  "Plain": 356
                },
                "default": [
                  0
                ],
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 359
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 152
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 152
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "ty": 222
          },
          "event": {
            "ty": 34
          },
          "constants": [],
          "error": {
            "ty": 361
          },
          "index": 10
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 94
                },
                "default": [
                  100,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 11
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 362
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 366
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 369
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 235
          },
          "event": {
            "ty": 35
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                193,
                111,
                242,
                134,
                35,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 370
          },
          "index": 20
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "entries": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 371
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 372,
                    "value": 373
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 375,
                    "value": 376
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 377
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": {
            "ty": 236
          },
          "event": {
            "ty": 37
          },
          "constants": [
            {
              "name": "AssetDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                176,
                59,
                63,
                233,
                227,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                0,
                128,
                160,
                215,
                251,
                202,
                236,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": {
            "ty": 379
          },
          "index": 21
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 380
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 382
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "ty": 238
          },
          "event": {
            "ty": 39
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [
                0,
                0,
                178,
                211,
                89,
                91,
                240,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "ty": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 383
          },
          "index": 22
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 384
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 385
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 40
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 23
        },
        {
          "name": "SimpleInflation",
          "storage": {
            "prefix": "SimpleInflation",
            "entries": [
              {
                "name": "IssuingAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  232,
                  137,
                  4,
                  35,
                  199,
                  138,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 240
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 24
        },
        {
          "name": "FeesSplit",
          "storage": {
            "prefix": "FeesSplit",
            "entries": [
              {
                "name": "TreasuryCutPercent",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 241
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 386
          },
          "index": 25
        },
        {
          "name": "Airdrop",
          "storage": {
            "prefix": "Airdrop",
            "entries": [
              {
                "name": "AirdropChainState",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  1,
                  1
                ],
                "docs": []
              },
              {
                "name": "IconSnapshotMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128"
                    ],
                    "key": 42,
                    "value": 387
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "IceIconMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 42
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ServerAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ExchangeAccountsMap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 42,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "MerkleRoot",
                "modifier": "Optional",
                "ty": {
                  "Plain": 1
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "CreditorAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  1,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 242
          },
          "event": {
            "ty": 41
          },
          "constants": [],
          "error": {
            "ty": 388
          },
          "index": 26
        },
        {
          "name": "Contracts",
          "storage": {
            "prefix": "Contracts",
            "entries": [
              {
                "name": "PristineCode",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 389
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from an original code hash to the original code, untouched by instrumentation."
                ]
              },
              {
                "name": "CodeStorage",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 390
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping between an original code hash and instrumented wasm code, ready for execution."
                ]
              },
              {
                "name": "OwnerInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 392
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping between an original code hash and its owner information."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This is a **monotonic** counter incremented on contract instantiation.",
                  "",
                  " This is used in order to generate unique trie ids for contracts.",
                  " The trie id of a new contract is calculated from hash(account_id, nonce).",
                  " The nonce is required because otherwise the following sequence would lead to",
                  " a possible collision of storage:",
                  "",
                  " 1. Create a new contract.",
                  " 2. Terminate the contract.",
                  " 3. Immediately recreate the contract with the same account_id.",
                  "",
                  " This is bad because the contents of a trie are deleted lazily and there might be",
                  " storage of the old instantiation still in it when the new contract is created. Please",
                  " note that we can't replace the counter by the block number because the sequence above",
                  " can happen in the same block. We also can't keep the account counter in memory only",
                  " because storage is the only way to communicate across different extrinsics in the",
                  " same block.",
                  "",
                  " # Note",
                  "",
                  " Do not use it to determine the number of contracts. It won't be decremented if",
                  " a contract is destroyed."
                ]
              },
              {
                "name": "ContractInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 393
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The code associated with a given account.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "DeletionQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 395
                },
                "default": [
                  0
                ],
                "docs": [
                  " Evicted contracts that await child trie deletion.",
                  "",
                  " Child trie deletion is a heavy operation depending on the amount of storage items",
                  " stored in said trie. Therefore this operation is performed lazily in `on_initialize`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 248
          },
          "event": {
            "ty": 45
          },
          "constants": [
            {
              "name": "Schedule",
              "ty": 398,
              "value": [
                4,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                128,
                0,
                0,
                0,
                16,
                0,
                0,
                0,
                0,
                16,
                0,
                0,
                0,
                1,
                0,
                0,
                32,
                0,
                0,
                0,
                32,
                0,
                0,
                0,
                0,
                64,
                0,
                0,
                3,
                0,
                0,
                0,
                57,
                18,
                0,
                0,
                216,
                79,
                0,
                0,
                122,
                68,
                0,
                0,
                216,
                19,
                0,
                0,
                7,
                48,
                0,
                0,
                148,
                27,
                0,
                0,
                1,
                29,
                0,
                0,
                209,
                36,
                0,
                0,
                30,
                0,
                0,
                0,
                0,
                250,
                0,
                0,
                231,
                48,
                1,
                0,
                27,
                3,
                0,
                0,
                223,
                22,
                0,
                0,
                195,
                20,
                0,
                0,
                220,
                20,
                0,
                0,
                45,
                40,
                0,
                0,
                43,
                42,
                0,
                0,
                67,
                18,
                0,
                0,
                138,
                163,
                173,
                0,
                154,
                16,
                0,
                0,
                234,
                16,
                0,
                0,
                134,
                16,
                0,
                0,
                114,
                16,
                0,
                0,
                124,
                16,
                0,
                0,
                154,
                16,
                0,
                0,
                134,
                16,
                0,
                0,
                139,
                16,
                0,
                0,
                59,
                16,
                0,
                0,
                249,
                16,
                0,
                0,
                89,
                16,
                0,
                0,
                159,
                16,
                0,
                0,
                179,
                16,
                0,
                0,
                219,
                16,
                0,
                0,
                199,
                16,
                0,
                0,
                169,
                16,
                0,
                0,
                239,
                16,
                0,
                0,
                169,
                16,
                0,
                0,
                209,
                16,
                0,
                0,
                159,
                16,
                0,
                0,
                45,
                45,
                0,
                0,
                201,
                34,
                0,
                0,
                241,
                44,
                0,
                0,
                189,
                36,
                0,
                0,
                93,
                17,
                0,
                0,
                93,
                17,
                0,
                0,
                13,
                17,
                0,
                0,
                63,
                17,
                0,
                0,
                153,
                17,
                0,
                0,
                103,
                17,
                0,
                0,
                187,
                18,
                0,
                0,
                7,
                18,
                0,
                0,
                38,
                193,
                6,
                0,
                0,
                0,
                0,
                0,
                229,
                248,
                164,
                1,
                0,
                0,
                0,
                0,
                47,
                198,
                176,
                1,
                0,
                0,
                0,
                0,
                98,
                102,
                7,
                0,
                0,
                0,
                0,
                0,
                193,
                4,
                3,
                0,
                0,
                0,
                0,
                0,
                157,
                192,
                6,
                0,
                0,
                0,
                0,
                0,
                4,
                180,
                6,
                0,
                0,
                0,
                0,
                0,
                158,
                6,
                21,
                0,
                0,
                0,
                0,
                0,
                136,
                183,
                6,
                0,
                0,
                0,
                0,
                0,
                234,
                177,
                6,
                0,
                0,
                0,
                0,
                0,
                10,
                154,
                6,
                0,
                0,
                0,
                0,
                0,
                62,
                162,
                6,
                0,
                0,
                0,
                0,
                0,
                93,
                10,
                19,
                0,
                0,
                0,
                0,
                0,
                109,
                251,
                2,
                0,
                0,
                0,
                0,
                0,
                158,
                98,
                6,
                0,
                0,
                0,
                0,
                0,
                117,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                16,
                228,
                31,
                0,
                0,
                0,
                0,
                0,
                179,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                24,
                32,
                93,
                46,
                0,
                0,
                0,
                0,
                71,
                53,
                26,
                0,
                0,
                0,
                0,
                0,
                220,
                56,
                46,
                0,
                0,
                0,
                0,
                0,
                222,
                250,
                148,
                7,
                0,
                0,
                0,
                0,
                54,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                180,
                15,
                5,
                0,
                0,
                0,
                0,
                0,
                251,
                215,
                194,
                7,
                0,
                0,
                0,
                0,
                50,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                69,
                172,
                136,
                15,
                0,
                0,
                0,
                0,
                111,
                240,
                192,
                7,
                0,
                0,
                0,
                0,
                24,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                104,
                184,
                183,
                1,
                0,
                0,
                0,
                0,
                76,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                114,
                117,
                188,
                1,
                0,
                0,
                0,
                0,
                164,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                255,
                63,
                197,
                7,
                0,
                0,
                0,
                0,
                115,
                49,
                0,
                0,
                0,
                0,
                0,
                0,
                73,
                36,
                120,
                8,
                0,
                0,
                0,
                0,
                140,
                144,
                241,
                27,
                0,
                0,
                0,
                0,
                125,
                14,
                197,
                21,
                0,
                0,
                0,
                0,
                173,
                55,
                104,
                8,
                0,
                0,
                0,
                0,
                37,
                219,
                1,
                0,
                0,
                0,
                0,
                0,
                200,
                81,
                67,
                54,
                0,
                0,
                0,
                0,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                3,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                209,
                128,
                10,
                0,
                0,
                0,
                0,
                0,
                70,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                13,
                230,
                12,
                0,
                0,
                0,
                0,
                0,
                208,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                132,
                157,
                8,
                0,
                0,
                0,
                0,
                0,
                165,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                203,
                141,
                8,
                0,
                0,
                0,
                0,
                0,
                165,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                250,
                56,
                54,
                2,
                0,
                0,
                0,
                0,
                58,
                76,
                137,
                1,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Cost schedule and limits."
              ]
            },
            {
              "name": "DeletionQueueDepth",
              "ty": 4,
              "value": [
                191,
                132,
                3,
                0
              ],
              "docs": [
                " The maximum number of contracts that can be pending for deletion.",
                "",
                " When a contract is deleted by calling `seal_terminate` it becomes inaccessible",
                " immediately, but the deletion of the storage items it has accumulated is performed",
                " later. The contract is put into the deletion queue. This defines how many",
                " contracts can be queued up at the same time. If that limit is reached `seal_terminate`",
                " will fail. The action must be retried in a later block in that case.",
                "",
                " The reasons for limiting the queue depth are:",
                "",
                " 1. The queue is in storage in order to be persistent between blocks. We want to limit",
                " \tthe amount of storage that can be consumed.",
                " 2. The queue is stored in a vector and needs to be decoded as a whole when reading",
                "\t\tit at the end of each block. Longer queues take more weight to decode and hence",
                "\t\tlimit the amount of items that can be deleted per block."
              ]
            },
            {
              "name": "DeletionWeightLimit",
              "ty": 8,
              "value": [
                0,
                152,
                247,
                62,
                93,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum amount of weight that can be consumed per block for lazy trie removal.",
                "",
                " The amount of weight that is dedicated per block to work on the deletion queue. Larger",
                " values allow more trie keys to be deleted in each block but reduce the amount of",
                " weight that is left for transactions. See [`Self::DeletionQueueDepth`] for more",
                " information about the deletion queue."
              ]
            },
            {
              "name": "DepositPerByte",
              "ty": 6,
              "value": [
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance a caller has to pay for each byte of storage.",
                "",
                " # Note",
                "",
                " Changing this value for an existing chain might need a storage migration."
              ]
            },
            {
              "name": "ContractAccessWeight",
              "ty": 8,
              "value": [
                150,
                93,
                4,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight per byte of code that is charged when loading a contract from storage.",
                "",
                " Currently, FRAME only charges fees for computation incurred but not for PoV",
                " consumption caused for storage access. This is usually not exploitable because",
                " accessing storage carries some substantial weight costs, too. However in case",
                " of contract code very much PoV consumption can be caused while consuming very little",
                " computation. This could be used to keep the chain busy without paying the",
                " proper fee for it. Until this is resolved we charge from the weight meter for",
                " contract access.",
                "",
                " For more information check out: <https://github.com/paritytech/substrate/issues/10301>",
                "",
                " [`DefaultContractAccessWeight`] is a safe default to be used for Polkadot or Kusama",
                " parachains.",
                "",
                " # Note",
                "",
                " This is only relevant for parachains. Set to zero in case of a standalone chain."
              ]
            },
            {
              "name": "DepositPerItem",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance a caller has to pay for each storage item.",
                "",
                " # Note",
                "",
                " Changing this value for an existing chain might need a storage migration."
              ]
            }
          ],
          "error": {
            "ty": 402
          },
          "index": 30
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "entries": [
              {
                "name": "Pending",
                "modifier": "Default",
                "ty": {
                  "Plain": 403
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "ty": {
                  "Plain": 412
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "ty": {
                  "Plain": 417
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "ty": {
                  "Plain": 418
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 60,
                    "value": 10
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 251
          },
          "event": {
            "ty": 46
          },
          "constants": [],
          "error": {
            "ty": 419
          },
          "index": 31
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "entries": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 47,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 420,
                    "value": 10
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 261
          },
          "event": {
            "ty": 56
          },
          "constants": [],
          "error": {
            "ty": 421
          },
          "index": 32
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "entries": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "ty": {
                  "Plain": 60
                },
                "default": [
                  0,
                  32,
                  74,
                  169,
                  209,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "ty": {
                  "Plain": 62
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 265
          },
          "event": {
            "ty": 59
          },
          "constants": [],
          "error": null,
          "index": 33
        },
        {
          "name": "DynamicFee",
          "storage": {
            "prefix": "DynamicFee",
            "entries": [
              {
                "name": "MinGasPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 60
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TargetMinGasPrice",
                "modifier": "Optional",
                "ty": {
                  "Plain": 60
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 266
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 34
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 422
                },
                "default": [
                  0
                ],
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 267
          },
          "event": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "error": {
            "ty": 425
          },
          "index": 40
        },
        {
          "name": "CollatorSelection",
          "storage": {
            "prefix": "CollatorSelection",
            "entries": [
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "ty": {
                  "Plain": 426
                },
                "default": [
                  0
                ],
                "docs": [
                  " The invulnerable, fixed collators."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 427
                },
                "default": [
                  0
                ],
                "docs": [
                  " The (community, limited) collation candidates."
                ]
              },
              {
                "name": "LastAuthoredBlock",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Last block authored by collator."
                ]
              },
              {
                "name": "DesiredCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Desired number of candidates.",
                  "",
                  " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
                ]
              },
              {
                "name": "CandidacyBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Fixed amount to deposit to become a collator.",
                  "",
                  " When a collator calls `leave_intent` they immediately receive the deposit back."
                ]
              }
            ]
          },
          "calls": {
            "ty": 271
          },
          "event": {
            "ty": 63
          },
          "constants": [],
          "error": {
            "ty": 430
          },
          "index": 41
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 431
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 433
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 273
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 434,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 272
          },
          "event": {
            "ty": 65
          },
          "constants": [],
          "error": {
            "ty": 436
          },
          "index": 42
        },
        {
          "name": "Aura",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 43
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 437
                },
                "default": [
                  0
                ],
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will always",
                  " be updated to the latest AuRa authorities in `on_finalize`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 44
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 439
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 440
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 276
          },
          "event": {
            "ty": 66
          },
          "constants": [
            {
              "name": "ProposalBond",
              "ty": 62,
              "value": [
                80,
                195,
                0,
                0
              ],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "ty": 6,
              "value": [
                0,
                0,
                232,
                137,
                4,
                35,
                199,
                138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "ty": 340,
              "value": [
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "ty": 62,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "ty": 441,
              "value": [
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": {
            "ty": 442
          },
          "index": 50
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "entries": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 443
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 445
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "ty": {
                  "Plain": 440
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 277
          },
          "event": {
            "ty": 67
          },
          "constants": [
            {
              "name": "BountyDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "ty": 4,
              "value": [
                128,
                112,
                0,
                0
              ],
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "ty": 4,
              "value": [
                64,
                227,
                9,
                0
              ],
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "CuratorDepositMultiplier",
              "ty": 62,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "ty": 340,
              "value": [
                1,
                0,
                0,
                32,
                198,
                90,
                188,
                142,
                215,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "CuratorDepositMin",
              "ty": 340,
              "value": [
                1,
                0,
                0,
                232,
                137,
                4,
                35,
                199,
                138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "ty": 6,
              "value": [
                0,
                0,
                232,
                137,
                4,
                35,
                199,
                138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                0,
                138,
                93,
                120,
                69,
                99,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "ty": 4,
              "value": [
                0,
                64,
                0,
                0
              ],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "error": {
            "ty": 446
          },
          "index": 51
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "entries": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 447
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 278
          },
          "event": {
            "ty": 68
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "ty": 4,
              "value": [
                0,
                64,
                0,
                0
              ],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                0,
                138,
                93,
                120,
                69,
                99,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "ty": 448,
              "value": [
                20
              ],
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for placing a tip report."
              ]
            }
          ],
          "error": {
            "ty": 449
          },
          "index": 52
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 450
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 452
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The preimages stored by this pallet."
                ]
              }
            ]
          },
          "calls": {
            "ty": 279
          },
          "event": {
            "ty": 69
          },
          "constants": [],
          "error": {
            "ty": 453
          },
          "index": 53
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 280
          },
          "event": {
            "ty": 70
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 454
          },
          "index": 60
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 455
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 72
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "ty": 290
          },
          "event": {
            "ty": 71
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 8,
              "value": [
                0,
                128,
                110,
                135,
                116,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "error": {
            "ty": 458
          },
          "index": 61
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 459
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 463
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 293
          },
          "event": {
            "ty": 75
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                77,
                233,
                127,
                34,
                226,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "ty": 6,
              "value": [
                0,
                32,
                225,
                143,
                170,
                220,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                77,
                233,
                127,
                34,
                226,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "ty": 6,
              "value": [
                0,
                64,
                194,
                31,
                85,
                185,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": {
            "ty": 467
          },
          "index": 62
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 468,
                    "value": 469
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 470
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 295
          },
          "event": {
            "ty": 78
          },
          "constants": [
            {
              "name": "DepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                103,
                124,
                122,
                88,
                240,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "ty": 6,
              "value": [
                0,
                0,
                164,
                7,
                49,
                175,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "ty": 77,
              "value": [
                100,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": {
            "ty": 471
          },
          "index": 63
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "entries": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "ty": {
                  "Plain": 472
                },
                "default": [
                  0
                ],
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 64
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "entries": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "ty": {
                  "Plain": 473
                },
                "default": [
                  0
                ],
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 475
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 476
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 477
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 480
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "ty": {
                  "Plain": 485
                },
                "default": [
                  0
                ],
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 486
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 487
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "ty": 298
          },
          "event": {
            "ty": 80
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "ty": 4,
              "value": [
                224,
                196,
                0,
                0
              ],
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "ty": 4,
              "value": [
                224,
                196,
                0,
                0
              ],
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "ty": 38,
              "value": [
                1
              ],
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "ty": 4,
              "value": [
                132,
                3,
                0,
                0
              ],
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "ty": 4,
              "value": [
                224,
                196,
                0,
                0
              ],
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "ty": 6,
              "value": [
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "error": {
            "ty": 488
          },
          "index": 70
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 489
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 220
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 490
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 301
          },
          "event": {
            "ty": 84
          },
          "constants": [],
          "error": {
            "ty": 491
          },
          "index": 71
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 492
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 220
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 10,
                    "value": 490
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 302
          },
          "event": {
            "ty": 85
          },
          "constants": [],
          "error": {
            "ty": 493
          },
          "index": 72
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 494
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "ty": {
                  "Plain": 494
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 87
                },
                "default": [
                  0
                ],
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 496
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 303
          },
          "event": {
            "ty": 86
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 116,
              "value": [
                112,
                104,
                114,
                101,
                108,
                101,
                99,
                116
              ],
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "ty": 6,
              "value": [
                0,
                0,
                172,
                182,
                21,
                21,
                236,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "ty": 6,
              "value": [
                0,
                0,
                164,
                7,
                49,
                175,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            },
            {
              "name": "MaxCandidates",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum number of candidates in a phragmen election.",
                "",
                " Warning: The election happens onchain, and this value will determine",
                " the size of the election. When this limit is reached no more",
                " candidates are accepted in the election."
              ]
            },
            {
              "name": "MaxVoters",
              "ty": 4,
              "value": [
                16,
                39,
                0,
                0
              ],
              "docs": [
                " The maximum number of voters to allow in a phragmen election.",
                "",
                " Warning: This impacts the size of the election which is run onchain.",
                " When the limit is reached the new voters are ignored."
              ]
            }
          ],
          "error": {
            "ty": 497
          },
          "index": 73
        },
        {
          "name": "CouncilMembership",
          "storage": {
            "prefix": "CouncilMembership",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 498
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "ty": 305
          },
          "event": {
            "ty": 89
          },
          "constants": [],
          "error": {
            "ty": 499
          },
          "index": 74
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 500
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "ty": 306
          },
          "event": {
            "ty": 90
          },
          "constants": [],
          "error": {
            "ty": 501
          },
          "index": 75
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 502
                },
                "default": [
                  0
                ],
                "docs": [
                  " Status of the inbound XCMP channels."
                ]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 508,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 509
                },
                "default": [
                  0
                ],
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 512,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 94,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 513
                },
                "default": [
                  2,
                  0,
                  0,
                  0,
                  5,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  160,
                  134,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  200,
                  23,
                  168,
                  4,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 514
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "calls": {
            "ty": 307
          },
          "event": {
            "ty": 91
          },
          "constants": [],
          "error": {
            "ty": 515
          },
          "index": 80
        },
        {
          "name": "PolkadotXcm",
          "storage": null,
          "calls": {
            "ty": 308
          },
          "event": {
            "ty": 95
          },
          "constants": [],
          "error": {
            "ty": 516
          },
          "index": 81
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": null,
          "event": {
            "ty": 134
          },
          "constants": [],
          "error": {
            "ty": 517
          },
          "index": 82
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "entries": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "ty": {
                  "Plain": 518
                },
                "default": [
                  0,
                  228,
                  11,
                  84,
                  2,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The configuration."
                ]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 519
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The page index."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 520
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queue pages."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 521
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The overweight messages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 333
          },
          "event": {
            "ty": 135
          },
          "constants": [],
          "error": {
            "ty": 522
          },
          "index": 83
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 137,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total issuance of a token type."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 523,
                    "value": 524
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 523,
                    "value": 527
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 523,
                    "value": 528
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 334
          },
          "event": {
            "ty": 136
          },
          "constants": [
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 531
          },
          "index": 84
        },
        {
          "name": "XTokens",
          "storage": {
            "prefix": "XTokens",
            "entries": []
          },
          "calls": {
            "ty": 335
          },
          "event": {
            "ty": 139
          },
          "constants": [
            {
              "name": "SelfLocation",
              "ty": 97,
              "value": [
                1,
                1,
                0,
                65,
                31
              ],
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "ty": 9,
              "value": [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "error": {
            "ty": 532
          },
          "index": 85
        },
        {
          "name": "AssetRegistry",
          "storage": {
            "prefix": "AssetRegistry",
            "entries": [
              {
                "name": "Metadata",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 141
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata of an asset, indexed by asset id."
                ]
              },
              {
                "name": "LocationToAssetId",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 97,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maps a multilocation to an asset id - useful when processing xcm",
                  " messages."
                ]
              },
              {
                "name": "LastAssetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last processed asset id - used when assigning a sequential id."
                ]
              }
            ]
          },
          "calls": {
            "ty": 339
          },
          "event": {
            "ty": 140
          },
          "constants": [],
          "error": {
            "ty": 533
          },
          "index": 90
        },
        {
          "name": "UnknownTokens",
          "storage": {
            "prefix": "UnknownTokens",
            "entries": [
              {
                "name": "ConcreteFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 534,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Concrete fungible balances under a given location and a concrete",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              },
              {
                "name": "AbstractFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 535,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Abstract fungible balances under a given location and a abstract",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 144
          },
          "constants": [],
          "error": {
            "ty": 536
          },
          "index": 91
        },
        {
          "name": "Currencies",
          "storage": {
            "prefix": "Currencies",
            "entries": []
          },
          "calls": {
            "ty": 343
          },
          "event": null,
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 137,
              "value": [
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 537
          },
          "index": 92
        }
      ],
      "extrinsic": {
        "ty": 538,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckSpecVersion",
            "ty": 544,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 545,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 546,
            "additional_signed": 10
          },
          {
            "identifier": "CheckMortality",
            "ty": 547,
            "additional_signed": 10
          },
          {
            "identifier": "CheckNonce",
            "ty": 549,
            "additional_signed": 31
          },
          {
            "identifier": "CheckWeight",
            "ty": 550,
            "additional_signed": 31
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 551,
            "additional_signed": 31
          }
        ]
      },
      "ty": 553
    }
  }
]
